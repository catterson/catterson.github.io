---
format: html
---

# Lecture 2 : Describing Data with Pictures and Numbers

## [Check-In (Loading Data)](https://docs.google.com/forms/d/e/1FAIpQLSeEAtYuXfVI9y1YY3cMHsVe9ij-1T4H5ggkj_6AmDnTZZeTlA/viewform?usp=header)

Hi class, please work on the check-in. We will get started soon. Ask for help if you are stuck!

![](images/2_kermitrain.webp){fig-align="center"}

## Announcements

-   Presentations:
    -   Begin today (professor)
    -   [Sign-Up Sheet](https://docs.google.com/spreadsheets/d/1zQClUHVzmYOMETVwGsFGnDNCX-eMeBQ6nby46EPyHEM/edit?gid=0#gid=0) Updated w/ another presentation :)
-   Updates / Questions from Week 1.
    -   **Shifting Mini Exam to 2/28**
        -   More time to practice
        -   Can cover (and review) Linear Models \[foundational!\]
        -   No class "after" the exam. Just the exam. That's enough? Yeah.
        -   *2/28 presentation moved to 2/21*
        -   Let me know if this causes issues / stress!
    -   **Do we want a class discord (community / troubleshooting / another notification?)**

## Agenda and Goals

This week, we'll learn how to describe data using R and statistics and human language.

-   **REVIEW : Announcements, Check-In, and Week 1 (30 Minutes)**

-   **PART 1 : Describing Data with R, Statistics, and Human Language (50 Minutes)**

    -   Describing Categorical Data
    -   Describing Numeric Data
    -   Using Quarto to Make and Share Nice Reports

-   **BREAK TIME (10 Minutes) + Article Presentation (30 Minutes)**

-   **PART 2 : Mean Thoughts (Remaining Time & Energy)**

    -   The Mean as Prediction
    -   The Mean Minimizes Residual Error
    -   The Mean is Sensitive to Outliers
    -   The Mean is a Social Construction

## Week 1 Recap and Review

### The Monty-Hall Problem \[100 Door Version\]

```{r}
## CREATING 100 DOORS
door100 <- array() # this defines an empty array; a place to "store" my values
for(i in c(1:100)){ # this starts the for-loop, and tells R I want to repeat some process 100 times, and keep track with the variable i
  door100[i] <- paste("door", i, sep = "") # the paste() function sticks the string "door" and the variable i together, separated by no value
                                           # since i updates every time we iterate through the loop, each door will increase from 1 to 100.
                                           # the assign <- sticks this value to the variable door100 in position i
} # this ends the loop

door100 # testing to see if the loop works. it did.

## WHAT HAPPENS IF THERE ARE 100 DOORS?
win.stay100 <- array() # defining a new place to save values when we have 100 doors. I could call this anything.
win.switch100 <- array() # defining a new place to save values when we have 100 doors. I could call this anything.
for(i in c(1:10000)){ # running 10000 simulations.
  choice <- sample(door100, 1) # the new set of 100 doors
  treasure <- sample(door100, 1) 
  can.open <- setdiff(door100, c(choice, treasure))
  monty.open <- sample(can.open, 98) # monty will open 98 other doors, leaving my choice + the treasure.
  choice.switch <- sample(setdiff(door100, c(monty.open, choice)), 1) # if switch, I can still only choose from whatever is left.
  win.stay100[i] <- ifelse(choice == treasure, "WIN", "LOSE") # this is the result if we stay with our initial choice
  win.switch100[i] <- ifelse(choice.switch == treasure, "WIN", "LOSE") # this is the result if we switch
}

sum(win.stay100 == "WIN")/length(win.stay100) # probability if I stay. Note that rather than divide by 1000, I'm dividing by the value of length(). If I change the # of simulations to run above, I don't have to update my code here. This is GOOD PRACTICE.
sum(win.switch100 == "WIN")/length(win.switch100) # YEAH!!!!
```

### Data Organization and Loading

Below are the twelve (12) criteria Broman & Woo (2018) articulated for thinking about data. Review the list. What practices below have you encountered or struggled with in working with data so far? What terms or ideas do you have questions about? Is there anything else that should be added to this list?

1.  Consistency
2.  Good Names
3.  Write Dates as YYYY-MMM-DD
4.  No Empty Cells
5.  Put Just One Thing in a Cell
6.  Make it a rectangle.
7.  Data Dictionary
8.  No calculations in the raw data file.
9.  No font color or highlighting as data.
10. Make backups
11. Data validation to avoid errors.
12. Saving data in plaintext.

### Check-In : Loading and Navigating Data

```{r}

```

## PART 1 : Describing Data with R, Statistics, and Human Language

### Categorical Data

-   `summary()` or `table()`: to count frequencies of categorical data

-   `as.factor()` and `as.numeric()` : to translate data

-   `levels()` or `factor()` : to relevel or change factor names

-   `plot` : graphing categorical data

### Numeric Data

-   `summary()` or `psych::describe() # this comes from the psych package which you must install` : to summarize data

    -   `mean()`

    -   `median()`

    -   `sd()`

    -   `range()`

    -   note : if there are missing data (often!) you must manually tell R to remove the missing data : `mean(d$variable, na.rm = T)`

-   **`hist()`** or `boxplot()` **:** graphing numeric data

### Using Quarto to Make and Share Nice Reports

[**Quarto**](https://quarto.org) is a version of R Markdown, which is a version of Markdown, which is a powerful way to author code that is meant for both humans and computers to read.

-   Advantages :

    -   can create a document that works for R code, can create a presentation, or a website
    -   much faster to get your code from R to something that humans can read
        -   no more copy-paste graphs or output.
        -   can update graphs and output as your needs / datset changes
    -   lots of features - open-source heritage and culture, but supported financially my Micro\$oft.
        -   ability to format your code; render it as a website, pdf, book, etc.
        -   interactive documents (Shiny; html-live; etc.)

-   Disadvantages :

    -   code must be "perfect" in order to correctly render.
    -   can go down formatting and feature rabbit holes that are not necessarily condusive to good science.
    -   another dialect of the language you are trying to learn
        -   in R : code is the default; human comments added with #s
        -   in Quarto : human text is the default; you insert a code block when you want R to do something (and can then comment in that code)

    ```{r}
    1+1 # like this
    ```

-   In this class, we will work with both .R scripts and .qmd Quarto Markdown Files

    -   .R Scripts for tinkering with data (in-class tutorials; initial analyses)
    -   .qmd files for "final" products (Lecture notes, lab documents, your project)

-   There are many thorough guides on how to use Quarto, but honestly the [official Quarto reference book](https://quarto.org/docs/reference/) is almost constantly open on my computer (in multiple tabs....sigh.) But let me know if you find another cool resource!

-   **Things to do in Quarto :**

    -   write in human text

    -   insert a code block

    -   insert inline code

    -   render everything with no pain and drama as a .pdf or .html file and share this with others.

## BREAK TIME & ARTICLE PRESENTATION

-   [See the article presentation slideshow](https://docs.google.com/presentation/d/1YZQ45_oj6TgiSIUpU7N6Ek5iTk2nn4T5RIpCz6Xi1K4/edit?usp=sharing) \[warning : everyone has edit access. be careful!\]

## PART 2 : Mean Thoughts \[R Demo\]

We will see how far we get in exploring these ideas!

### The Mean is Prediction

-   Illustrating the mean as a "line of best fit" \[our first linear model!\]

    ```{r}

    ```

-   Illustrating the standard deviation as the "average" amount of residual error.

    ```{r}

    ```

### The Mean "Best" Minimizes Residual Error

-   Illustrating that the mean is the value that reduces the sum of our residual error.

    ```{r}
    ```

### The Mean is Sensitive to Outliers

-   Illustrating how the mean is more sensitive to outliers than the median

    ```{r}

    ```

### The Mean Is a Social Construction

-   What is average, anyway? And who "invented" it?

::: callout-warning
## Critical Race Theory DEI Alert!

Francis Galton was a super racist, eugenicist, and inventor of many statistics that we will use today. He had a motivated agenda to use statistics to demonstrate there was a hierarchy to individual "eminence." In his own words:

*To conclude, the range of mental power between—I will not say the highest Caucasian and the lowest savage—but between the greatest and least of English intellects, is enormous. There is a continuity of natural ability reaching from one knows not what height, and descending to one can hardly say what depth. I propose in this chapter to range men according to their natural abilities, putting them into classes separated by equal degrees of merit, and to show the relative number of individuals included in the several classes. Perhaps some persons might be inclined to make an offhand guess that the number of men included in the several classes would be pretty equal. If he thinks so, I can assure him he is most egregiously mistaken.*

*The method I shall employ for discovering all this, is an application of the very curious theoretical law of “deviation from an average.” First, I will explain the law, and then I will show that the production of natural intellectual gifts comes justly within its scope. -* Galton, Hereditary Genius (1869). [Linked here](https://galton.org/books/hereditary-genius/text/v5/galton-1869-hereditary-genius-v5.htm).

**Why does it matter that a super racist invented statistics? I have a few ideas, but would like to hear your thoughts first :)**
:::

-   Testing whether anyone is actually described by "the mean"?

    ```{r}

    ```
