## Fake datsets
rnorm(n = 100, mean = 10, sd = 10)
Hi class.
1+1
sleep
sleepy
sleepy <- c()
sleepy
sleepy
sleepy <- c(7.5, 5, 7.5, 5, 8, 8, 5, 8, 6, 6, 7.5, 8, 8, 5, 6.5, 6)
hist(sleepy)
?hist
hist(sleepy, col = blue) # the hist function
hist(sleepy, col = "blue")
## String Variables
??sturges
## String Variables
breakfast <- c(no)
## String Variables
breakfast <- c("no", "yes", "no", "no", "yes", "yes",
"no", "yes", "yes", "yes", "yes", "yes",
"yes", "yes", "no", "no")
hist(breakfast)
plot(breakfast)
breakfast
as.factor(breakfast)
breakfast
as.factor(breakfast)
breakfast <- as.factor(breakfast)
breakfast
plot(breakfast)
data.frame(sleepy, breakfast)
sleepybreakfast <- data.frame(sleepy, breakfast)
d <- data.frame(sleepy, breakfast)
hist(d$sleepy)
datasets::chickwts
### head()
head(chickwts)
tail(chickwts)
### summary()
summary(chickwts)
### names()
names(chickwts)
colnames(chickwts)
?colnames
rownames(chickwts)
?names
sample(1:10, 1)
sample(1:10, 1)
sample(1:10, 1)
### sample()
sample(1:10, 1)
sample(1:10, 1)
sample(1:3, 1)
sample(1:3, 1)
sample(1:3, 1)
doors <- c("door1", "door2", "door3")
choice <- sample(doors, 1)
choice
choice
choice
choice
choice
choice
choice
treasure <- sample(doors, 1)
treasure
## Define player choice and treasure location.
choice <- sample(doors, 1)
choice
## Define player choice and treasure location.
choice <- sample(doors, 1)
choice
?setdiff
door
doors
choice
setdiff(doors, choice)
## Define what doors Monty can open.
union(doors, choice)
## Define what doors Monty can open.
intersect(doors, choice)
setdiff(doors, choice)
c(choice, treasure)
setdiff(doors, c(choice, treasure))
setdiff(doors, c(choice, treasure))
setdiff(doors, c(choice, treasure))
sample(montychoices, 1) # same thing, but less nesting of code!
montychoices <- setdiff(doors, c(choice, treasure))
sample(montychoices, 1) # same thing, but less nesting of code!
monty.open <- sample(montychoices, 1) # same thing, but less nesting of code!
new.choice <- setdiff(doors, c(choice, monty.open))
new.choice
treasure
## Test whether we won or not under the switch and no switch conditions.
new.choice == treasure
choice == treasure
choice
treasure
new.choice == treasure
ifelse(choice == treasure, "WIN", "LOSE")
win.stay <- array()
win.switch <- array()
win.stay <- array()
win.switch <- array()
doors <- c("door1", "door2", "door3")
win.stay <- array()
win.switch <- array()
for(i in c(1:1000)){
choice <- sample(doors, 1)
treasure <- sample(doors, 1)
monty.open <- sample(setdiff(doors, c(choice, treasure)), 1)
switch.choice <- setdiff(doors, c(choice, monty.open))
win.stay[i] <- ifelse(choice == treasure, "WIN", "LOSE")
win.switch[i] <- ifelse(switch.choice == treasure, "WIN", "LOSE")
}
win.stay
win.switch
summary(win.switch)
table(win.switch)
table(win.stay)
d <- read.csv("~/Dropbox/!GRADSTATS/Datasets/Grad Onboard 2025/grad_onboard_SP25.csv")
d
head(d)
nrow(d)
ncol(d)
length(d)
names(d)
d$epistemology
levels(d$epistemology)
as.factor(d$epistemology)
levels(d$epistemology)
d$epistemology <- as.factor(d$epistemology)
levels(d$epistemology)
levels(d$epistemology) <- c("soccon", "postpos", "pos", "antipos")
d$epistemology
plot(d$epistemology)
summary(d$epistemology)
table(d$epistemology)
## LOADING DATA.
d <- read.csv("~/Dropbox/!GRADSTATS/Datasets/Grad Onboard 2025/grad_onboard_SP25.csv",
stringsAsFactors = T)
levels(d$epistemology)
#d$epistemology <- as.factor(d$epistemology)
levels(d$epistemology) <- c("soccon", "postpos", "pos", "antipos")
d$epistemology
plot(d$epistemology)
summary(d$epistemology)
table(d$epistemology)
plot(d$consent)
## find the individual in the variable who did not consent
plot(d$consent)
levels(d$consent)
d$epistemology
d$consent
d$consent[33]
d$consent[d$consent == "I am the professor and you should remove me."]
d$consent[33]
d[33]
d[33,]
d[d$consent == "I am the professor and you should remove me."]
d[d$consent == "I am the professor and you should remove me.",]
d[d$consent == "I am the professor and you should remove me.",] <- NA
plot(d$consent)
d$consent
hist(d$class.skills)
hist(d$self.skills)
par(mfrow = c(1,2))
hist(d$self.skills)
hist(d$class.skills)
hist(d$self.skills, main = "")
hist(d$self.skills, main = "")
hist(d$class.skills, main = "")
par(mfrow = c(1,2))
hist(d$self.skills, main = "")
hist(d$class.skills, main = "")
hist(d$self.skills, main = "", xlab = "Self-Skills")
hist(d$class.skills, main = "", xlab = "Self-Skills")
hist(d$class.skills, main = "", xlab = "Perceptions of Classmates' Skills")
par(mfrow = c(1,2))
hist(d$self.skills, main = "", xlab = "Self-Skills")
hist(d$class.skills, main = "", xlab = "Perceptions of Classmates' Skills")
par(mfrow = c(1,2))
hist(d$self.skills, main = "", xlab = "Self-Perceptions of Skills")
hist(d$class.skills, main = "", xlab = "Perceptions of Classmates' Skills")
hist(d$self.skills, main = "", xlab = "Self-Perceptions of Skills",
ylim = c(0,15))
hist(d$class.skills, main = "", xlab = "Perceptions of Classmates' Skills",
ylim = c(0,15))
hist(d$self.skills, main = "", xlab = "Self-Perceptions of Skills",
ylim = c(0,20))
hist(d$class.skills, main = "", xlab = "Perceptions of Classmates' Skills",
ylim = c(0,20))
par(mfrow = c(1,2))
hist(d$self.skills, main = "", xlab = "Self-Perceptions of Skills",
ylim = c(0,20))
hist(d$class.skills, main = "", xlab = "Perceptions of Classmates' Skills",
ylim = c(0,20))
mean(d$self.skills)
mean(d$self.skills, na.rm = T)
mean(d$class.skills, na.rm = T)
hist(d$self.skills, main = "", xlab = "Self-Perceptions of Skills",
ylim = c(0,20))
abline(v = mean(d$self.skills, na.rm = T), lwd = 5)
hist(d$class.skills, main = "", xlab = "Perceptions of Classmates' Skills",
ylim = c(0,20))
abline(v = mean(d$class.skills, na.rm = T), lwd = 5)
par(mfrow = c(1,1))
plot(d$self.skills)
abline(h = mean(d$self.skills, na.rm = T), lwd = 5)
mean(d$self.skills, na.rm = T)
d$self.skills - mean(d$self.skills, na.rm = T) # how far each person is from the mean
sum(d$self.skills, na.rm = T)
diffy <- d$self.skills - mean(d$self.skills, na.rm = T) # how far each person is from the mean
sum(diffy, na.rm = T)
sum(diffy^2, na.rm = T)
length(diffy)
sum(diffy^2, na.rm = T)/length(diffy)
sum.square.diffy <- sum(diffy^2, na.rm = T)
sum.square.diffy/length(diffy)
sqrt(sum.square.diffy)/length(diffy)
sd(d$self.skills, na.rm = T)
sqrt(sum.square.diffy/length(diffy))
length(diffy)
sqrt(sum.square.diffy/length(diffy))
sd(d$self.skills, na.rm = T)
sqrt(sum.square.diffy/((length(diffy)-1))
sqrt(sum.square.diffy/((length(diffy)-1))
sqrt(sum.square.diffy/(((length(diffy)-1))
sqrt(sum.square.diffy/((length(diffy)-1)))
sd(d$self.skills, na.rm = T)
1+1
