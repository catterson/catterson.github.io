summary(d$feet.relax)[2] # finds the second group.
summary(d$feet.relax)[2]
round(48/196 * 100, 1)
## editing a variable
plot(d$feet.relax)
levels(d$feet.relax)[1] <- NA
plot(d$feet.relax)
levels(d$feet.relax)
levels(d$feet.relax) <- c("no", "yes")
plot(d$feet.relax)
plot(d$feet.relax, xlab = "Can You Relax Your Feet?")
summary(d$feet.relax)[1] # finds the correct group.
summary(d$feet.relax)[1]
nrow(d)
summary(d$feet.relax)[1] / nrow(d)
*summary(d$feet.relax)[1] / nrow(d))*100
summary(d$feet.relax)[1] / nrow(d))*100
summary(d$feet.relax)[1] / nrow(d)*100
d <- read.csv("~/Library/CloudStorage/Dropbox/!WHY STATS/Class Datasets/101 - Class Datasets - FA25/interruption_FA25.csv", header=TRUE, stringsAsFactors=TRUE)
nrow(d)
names(d)
names(d)
hist(d$int1)
hist(d$int2)
par(mfrow = c(1,2))
par(mfrow = c(1,2))
par(mfrow = c(1,2))
hist(d$int1)
hist(d$int2)
hist(d$int2)
hist(d$int2)
par(mfrow = c(1,2))
hist(d$int1)
hist(d$int2)
max(d$int1, na.rm = T)
hist(d$int1, xlim = c(0, 100))
hist(d$int2, xlim = c(0, 100))
hist(d$int1, xlim = c(0, 100), ylim = c(0,60))
hist(d$int2, xlim = c(0, 100), ylim = c(0,60))
hist(d$int1, xlim = c(0, 100), ylim = c(0,80))
hist(d$int2, xlim = c(0, 100), ylim = c(0,80))
hist(d$int1, xlim = c(0, 100), ylim = c(0,100))
hist(d$int2, xlim = c(0, 100), ylim = c(0,100))
hist(d$int1,
xlim = c(0, 100),
ylim = c(0,100),
main = "Video 1",
xlab = "Interruption Trial 1")
hist(d$int2, xlim = c(0, 100), ylim = c(0,100),
main = "Video 2",
xlab = "Interruption Trial 2")
par(mfrow = c(1,2))
hist(d$int1,
xlim = c(0, 100),
ylim = c(0,100),
main = "Trial 1",
xlab = "Interruption Counts")
hist(d$int2, xlim = c(0, 100), ylim = c(0,100),
main = "Trial 2",
xlab = "Interruption Counts")
par(mfrow = c(1,2))
hist(d$int1,
xlim = c(0, 100),
ylim = c(0,100),
main = "Trial 1 (Before Operationalization)",
xlab = "Interruption Counts")
hist(d$int2, xlim = c(0, 100), ylim = c(0,100),
main = "Trial 2 (After Operationalization)",
xlab = "Interruption Counts")
par(mfrow = c(1,2))
hist(d$int1,
xlim = c(0, 100),
ylim = c(0,100),
main = "Trial 1 \n(Before Operationalization)",
xlab = "Interruption Counts")
hist(d$int2, xlim = c(0, 100), ylim = c(0,100),
main = "Trial 2 \n(After Operationalization)",
xlab = "Interruption Counts")
par(mfrow = c(1,2), cex = .5)
hist(d$int1,
xlim = c(0, 100),
ylim = c(0,100),
main = "Trial 1 \n(Before Operationalization)",
xlab = "Interruption Counts")
hist(d$int2, xlim = c(0, 100), ylim = c(0,100),
main = "Trial 2 \n(After Operationalization)",
xlab = "Interruption Counts")
levels(d$feet.relax)[1] <- c("blah", "ungh")
levels(d$feet.relax)[1]
d$feet.relax
levels(d$feet.relax)[1]
### add everything up and then divide by the number of numbers.
plot(d$int1)
abline(h = mean(d$int1, na.rm = T), lwd = 5)
abline(h = median(d$int1, na.rm = T), lwd = 2, col = 'blue')
abline(h = median(d$int1, na.rm = T), lwd = 3, col = 'blue')
mean(d$int1, na.rm = T)
resid <- d$int1 - mean(d$int1, na.rm = T) # residuals
sum(resid, na.rm = T)
round(sum(resid, na.rm = T), 4)
d$int1 - mean(d$int1, na.rm = T)
round(sum(resid, na.rm = T), 4)
sd(d$int1)
abline(h = mean(d$int1, na.rm = T) + sd(d$int1),
lwd = 3, lty = 'dashed')
abline(h = mean(d$int1, na.rm = T) - sd(d$int1),
lwd = 3, lty = 'dashed')
mean(d$int1, na.rm = T)
hist(d$int1,
xlim = c(0, 100),
ylim = c(0,100),
main = "Trial 1 \n(Before Operationalization)",
xlab = "Interruption Counts")
abline(h = mean(d$int1, na.rm = T), lwd = 5)
abline(h = median(d$int1, na.rm = T), lwd = 3, col = 'blue')
abline(h = mean(d$int1, na.rm = T) + sd(d$int1),
lwd = 3, lty = 'dashed')
abline(h = mean(d$int1, na.rm = T) - sd(d$int1),
lwd = 3, lty = 'dashed')
par(mfrow = c(1,2), cex = .75)
hist(d$int1,
xlim = c(0, 100),
ylim = c(0,100),
main = "Trial 1 \n(Before Operationalization)",
xlab = "Interruption Counts")
abline(v = mean(d$int1, na.rm = T), lwd = 5)
abline(v = median(d$int1, na.rm = T), lwd = 3, col = 'blue')
abline(v = mean(d$int1, na.rm = T) + sd(d$int1),
lwd = 3, lty = 'dashed')
abline(v = mean(d$int1, na.rm = T) - sd(d$int1),
lwd = 3, lty = 'dashed')
par(mfrow = c(1,1), cex = .75)
hist(d$int1,
xlim = c(0, 100),
ylim = c(0,100),
main = "Trial 1 \n(Before Operationalization)",
xlab = "Interruption Counts")
abline(v = mean(d$int1, na.rm = T), lwd = 5)
abline(v = median(d$int1, na.rm = T), lwd = 3, col = 'blue')
abline(v = mean(d$int1, na.rm = T) + sd(d$int1),
lwd = 3, lty = 'dashed')
abline(v = mean(d$int1, na.rm = T) - sd(d$int1),
lwd = 3, lty = 'dashed')
hist(d$int2, xlim = c(0, 100), ylim = c(0,100),
main = "Trial 2 \n(After Operationalization)",
xlab = "Interruption Counts")
sd(d$int1)
sd(d$int2) #
sd(d$int2, na.rm = T)
## 9/26/25 : outliers and standard deviations!!!
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/101 - Class Datasets - FA25/interruption_FA25.csv", stringsAsFactors = T)
head(d)
nrow(d)
hist(d$int1)
max(d$int1)
d
d$int1
d$int1[c(34, 83)] # but hard...painful...might make mistakes.
d$int1[c(34, 87)] # but hard...painful...might make mistakes.
d$int1
d$int1[]
d$int1[d$int1 > 80]
d$int1 > 80 # the rule
d$int1[d$int1 > 80]
d$int1[d$int1 > 80] <- NA
hist(d$int1)
plot(d$int1)
abline(h = mean(d$int1, na.rm = T), lwd = 5)
d$int1
d$int1 - mean(d$int1, na.rm = T)
## KEY IDEA : NOT EVERYONE IS EXACTLY THE MEAN.
## CALCULATE THESE DIFFERENCES IN PEOPLE'S ACTUAL SCORES vs. THE MEAN = RESIDUAL
resid <- d$int1 - mean(d$int1, na.rm = T)
sum(resid, na.rm = T)
sum(resid^2, na.rm = T)
(sum(resid^2, na.rm = T))
length(d$int1)
(sum(resid^2, na.rm = T))/length(d$int1)
sqrt((sum(resid^2, na.rm = T))/length(d$int1)) # on average, each score is 103 squared interruptions away from the mean.
sd(d$int1, na.rm = T)
length(d$int1)
length(na.omit(d$int1)))
length(na.omit(d$int1))
length(na.omit(d$int1))
length(d$int1)
sqrt((sum(resid^2, na.rm = T))/length(na.omit(d$int1))) # on average, each score is 10 interruptions away from the mean.
sd(d$int1, na.rm = T) # very similar to what SD returns. because SD is the "average" of the residuals.
sqrt((sum(resid^2, na.rm = T))/length(na.omit(d$int1))-1) # on average, each score is 10 interruptions away from the mean.
r2 <- d$int2 - mean(d$int2, na.rm = T)
sum(r2^2)
sum(r2^2, na.rm = T)
sqrt(sum(r2^2, na.rm = T)/length(d$int2))
sd(d$int2)
sd(d$int2,na.rm = T)
## Q1. Load the mini_class dataset.
## Call this mini to follow along with professor's code.
## How many individuals are in this dataset?
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/101 - Class Datasets - FA25/mini_cal_data.csv", stringsAsFactors = T)
## Q2. Graph the variable hrs.sleep, (hours of sleep students said they got.)
## What is the shape of this distribution?
hist(d$hrs.sleep)
## Q2. Graph the variable hrs.sleep, (hours of sleep students said they got.)
## What is the shape of this distribution?
hist(d$insta.followers)
## Q2. Graph the variable hrs.sleep, (hours of sleep students said they got.)
## What is the shape of this distribution?
hist(d$insta.follows)
## Q2. Graph the variable insta.follows (the number of accounts people )
## What is the shape of this distribution?
hist(d$fb.friends)
## Q3. What is the average of this variable?
## (Round to two decimal places for the check-in)
describe(d$insta.follows)
library(psych)
## Q3. What is the average of this variable?
## (Round to two decimal places for the check-in)
describe(d$insta.follows)
## Q3. What is the average of this variable?
## (Round to two decimal places for the check-in)
describe(d$height)
## Q2. Graph the variable insta.follows (the number of accounts people follow on instagram)
## What is the shape of this distribution?
hist(d$height)
## Q2. Graph the variable insta.follows (the number of accounts people follow on instagram)
## What is the shape of this distribution?
hist(d$shoe.size)
hist(d$thirsty)
sd(d$thirsty)
mean(d$thirsty)
## Q7. What is the average height in the class?
hist(d$hrs.sleep)
## Q7. What is the average height in the class?
hist(d$hrs.sleep)
## Q7. What is the average height in the class?
hist(d$hrs.sleep[d$hrs.sleep < 12])
## Q7. What is the average height in the class?
mean(d$hrs.sleep[d$hrs.sleep < 12], na.rm = T)
## Q7. What is the average height in the class?
mean(d$hrs.sleep, na.rm = T)
d <- read.csv("~/Dropbox/!WHY STATS/Professor Datasets/Personality and Random Numbers/personality_random_number_data.csv", stringsAsFactors = T) # change your path here!
nrow(d)
names(d)
summary(d)
head(d)
nrow(d)
head(summary(d))
summary(d)[20:25]
summary(d)[,20:25]
summary(d)[,22:42] # the variables now have
describe(d)
library(psych)
describe(d)
d <- read.csv("~/Dropbox/!GRADSTATS/Datasets/CLASS DATASETS - 102 - FA25/Onboarding Data/honor_onboard_FA25.csv",
stringsAsFactors = T)
plot(d$can.forloop)
summary(d$can.forloop) # finding the values for each group.
plot(d$can.forloop)
r <- read.csv("~/Downloads/Intra-State-Wars-v5/INTRA-STATE WARS v5.1 CSV.csv")
d <- read.csv("~/Dropbox/!WHY STATS/Chapter Datasets/Intra-State-Wars/INTRA-STATE WARS v5.1 CSV.csv",
stringsAsFactors = T)
head(d)
d <- read.csv("~/Dropbox/!WHY STATS/Chapter Datasets/Intra-State-Wars/INTRA-STATE WARS v5.1 CSV.csv",
stringsAsFactors = T)
head(d)
nrow(d)
## FOCUS ON THE VARIABLE : TotalBDeaths
hist(d$TotalBDeaths)
summary(d$TotalBDeaths)
d$TotalBDeaths[d$TotalBDeaths < 0]
d$TotalBDeaths[d$TotalBDeaths < 0]
length(d$TotalBDeaths[d$TotalBDeaths < 0])
d$TotalBDeaths[d$TotalBDeaths < 0] <- NA
d$TotalBDeaths[d$TotalBDeaths < 0] <- NA
summary(d$TotalBDeaths
)
plot(d$TotalBDeaths)
abline(h = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(h = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
plot(d$TotalBDeaths, main = "Zoomed in", ylim = c(0,400000))
plot(d$TotalBDeaths, main = "Zoomed in", ylim = c(0,200000))
abline(h = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(h = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
plot(d$TotalBDeaths)
abline(h = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(h = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
plot(d$TotalBDeaths, main = "Zoomed in", ylim = c(0,200000))
abline(h = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(h = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
## Q. What is the standard deviation of the variable?
sd(d$TotalBDeaths, na.rm = T)
m <- mean(d$TotalBDeaths, na.rm = T)
s <- sd(d$TotalBDeaths, na.rm = T) # 90890.58
m
s
abline(h = m + s, lwd = 3, col = 'red', lty = 'dashed')
abline(h = m - s, lwd = 3, col = 'red', lty = 'dashed')
plot(d$TotalBDeaths, main = "Zoomed in", ylim = c(0,200000))
abline(h = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(h = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
abline(h = m + s, lwd = 3, col = 'red', lty = 'dashed')
abline(h = m - s, lwd = 3, col = 'red', lty = 'dashed')
m+s
m-s
## Q. What is the maximum value of the variable?
max(d$TotalBDeaths)
## Q. What is the maximum value of the variable?
max(d$TotalBDeaths, na.rm = T)
(1200000 - m)
(1200000 - m)/s
(600000 - m)/s
hist(d$TotalBDeaths)
log(d$TotalBDeaths)
hist(log(d$TotalBDeaths))
d$TotalBDeaths
## Q. Should you remove these data??
hist(d$TotalBDeaths)
(400000 - m)/s
d$TotalBDeaths[d$TotalBDeaths > 400000]
d
d[d$TotalBDeaths > 400000, ]
d[d$TotalBDeaths > 400000, d$WarName] # finding the type of war
d$WarName
d[d$TotalBDeaths > 400000, ] # finding the type of war
d[d$TotalBDeaths > 400000, 2] # finding the type of war
d$TotalBDeaths[d$TotalBDeaths > 400000]
d$TotalBDeaths[d$TotalBDeaths > 400000] <- NA
hist(d$TotalBDeaths)
hist(d$TotalBDeaths, breaks = 30)
hist(d$TotalBDeaths, breaks = 30)
abline(v = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(v = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
m <- mean(d$TotalBDeaths, na.rm = T)
s <- sd(d$TotalBDeaths, na.rm = T) # 90890.58
abline(v = m + s, lwd = 3, col = 'red', lty = 'dashed')
abline(v = m - s, lwd = 3, col = 'red', lty = 'dashed')
m
s
hist(log(d$TotalBDeaths))
m <- mean(log(d$TotalBDeaths), na.rm = T)
s <- sd(log(d$TotalBDeaths), na.rm = T) # 90890.58
m
s
abline(v = m, lwd = 3, col = 'red')
abline(v = m + s, lwd = 3, col = 'red', lty = 'dashed')
abline(v = m - s, lwd = 3, col = 'red', lty = 'dashed')
d <- read.csv("~/Dropbox/!GRADSTATS/Datasets/CLASS DATASETS - 102 - FA25/Onboarding Data/honor_onboard_FA25.csv", stringsAsFactors = T)
View(d)
head(d)
plot(d)
plot(d)
plot(d)
summary(d)
summary(d$can.forloop)
# asking R to find the # of yeses
length(d$can.forloop[d$can.forloop == "yes"])
d$can.forloop[d$can.forloop == "yes"]
length(d$can.forloop[d$can.forloop == "Yes"]) # says Zero because it's Yes not yes
d$can.forloop == "Yes"
sum(d$can.forloop == "Yes")
d$can.forloop == "Yes"
summary(d$can.forloop)
summary(d$can.forloop)[4]
summary(d$can.forloop)
# asking R to find the other groups.
sum(!d$can.forloop == "Yes") # adds up all the True values.
# finding the difference.
sum(d$can.forloop == "Yes") - sum(!d$can.forloop == "Yes")
notYes <- sum(!d$can.forloop == "Yes")
Yes <- sum(d$can.forloop == "Yes")
Yes - notYes
fakey <- rnorm(10000000, mean = 100, sd = 30)
hist(fakey)
abline(v = mean(fakey), lwd = 5)
mean(fakey)
truthbucket <- array()
for(i in c(1:1000)){
lilfakey <- fakey[sample(1:length(fakey), 10)] # ten random individuals from fakey.
truthbucket[i] <- mean(lilfakey)
}
hist(truthbucket)
abline(v = mean(truthbucket), lwd = 5, col = 'red')
mean(truthbucket) # the mean
sd(truthbucket) # the standard deviation
truthbucket100 <- array()
for(i in c(1:1000)){
lilfakey <- fakey[sample(1:length(fakey), 100)] # 100 random individuals from fakey.
truthbucket100[i] <- mean(lilfakey)
}
hist(truthbucket100)
abline(v = mean(truthbucket100), lwd = 5, col = 'red')
mean(truthbucket100) # the mean
sd(truthbucket100) # the standard deviation
megatruthbucket <- array()
for(i in c(1:10000)){
lilfakey <- fakey[sample(1:length(fakey), 10)] # ten random individuals from fakey.
megatruthbucket[i] <- mean(lilfakey)
}
hist(megatruthbucket)
abline(v = mean(megatruthbucket), lwd = 5, col = 'red')
mean(megatruthbucket) # the mean
sd(megatruthbucket) # the standard deviation
d <- read.csv("../datasets/Onboarding Data/honor_onboard_FA25.csv", stringsAsFactors = T, na.strings = "")
par(mfrow = c(1,2))
hist(d$self.skills, breaks = c(0:5),
col = 'black', bor = 'white', main = "Computer Skills\n(Self-Perceptions)")
d <- read.csv("../datasets/Onboarding Data/honor_onboard_FA25.csv", stringsAsFactors = T, na.strings = "")
par(mfrow = c(1,2))
hist(d$self.skills, breaks = c(0:5),
col = 'black', bor = 'white', main = "Computer Skills\n(Self-Perceptions)")
hist(d$class.skills, breaks = c(0:5),
col = 'black', bor = 'white', main = "Computer Skills\n(Perceptions of Classmates)")
d[sample(1:nrow(d), nrow(d), replace = T), ] # same code, all as one line.
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
newclass$self.skills
mean(newclass$self.skills)
mean(d$self.skills)
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
allmyclassesaregreat <- array()
allmyclassesaregreat <- array()
for(i in c(1:1000)){
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
allmyclassesaregreat[i] <- mean(newclass$self.skills)
}
hist(allmyclassesaregreat)
hist(d$self.skills, breaks = c(0:5),
col = 'black', bor = 'white', main = "Computer Skills\n(Self-Perceptions)")
SST <- sum((d$self.skills - mean(d$self.skills))^2) # defining the total error
SST
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/101 - Class Datasets - FA25/mini_cal_data.csv", stringsAsFactors = T)
nrow(d)
nrow(d)
head(d)
hist(d$insta.followers)
hist(d$insta.follows)
## Q4. What is the average of this variable?
## (Round to two decimal places for the check-in)
mean(d$insta.follows)
## Q4. What is the average of this variable?
## (Round to two decimal places for the check-in)
mean(d$insta.follows, na.rm = T)
### POP QUIZ : where would the median have to be? (and why??)
## below the mean / same as mean / above the mean
median(d$insta.follows, na.rm = T)
## Q6. What is the standard deviation of hrs.sleep?
sd(d$insta.follows, na.rm = T)
hist(d$insta.followers)
## Q7. What does this number mean / who cares about this value?
#### how much the average person differs from the average of the distribution!
#### the difference is in EITHER DIRECTION.
## BONUS QUESTION : how would you "see" the SD on the graph????
m <- mean(d$insta.follows, na.rm = T) # the mean.
s <- sd(d$insta.follows, na.rm = T) # the sd
hist(d$insta.follows)
abline(v = m, lwd = 5)
abline(v = m, lwd = 5, col = 'gray')
abline(v = m, lwd = 5, col = 'darkgray')
abline(v = m, lwd = 5, col = 'black')
abline(v = s, lty = "dashed")
hist(d$insta.follows)
abline(v = m, lwd = 5, col = 'black')
abline(v = m + s, lty = "dashed")
abline(v = m - s, lty = "dashed")
mean(d$hrs.sleep)
mean(d$hrs.sleep, na.rm = T)
## Q8. What is the average hours of sleep (hrs.sleep) for students in the class?
hist(d$hrs.sleep)
summary(d$hrs.sleep)
sd(d$hrs.sleep, na.rm = T)
d$hrs.sleep[d$hrs.sleep > 10]
d$hrs.sleep[d$engage < 3]
d$hrs.sleep[d$engage > 3]
d$hrs.sleep[d$tuhobura == "rat"]
d$tuhobura
d$hrs.sleep[d$tuhobura == "rats"]
## MOVING ON...
d$hrs.sleep[d$hrs.sleep > 10]
d$hrs.sleep[d$hrs.sleep > 10] <- NA
hist(d$hrs.sleep)
d <- read.csv("~/Dropbox/!WHY STATS/Chapter Datasets/Personality and Random Numbers/personality_random_number_data.csv",
stringsAsFactors = T)
names(d)
## Q1. How many individuals are in this dataset?
nrow(d)
## Q2. How many variables are in this dataset?
ncol(d)
head(d)
## Q3. The variable E1 is individual responses to the question "I am the life of the party" - a measure of Extraversion.
hist(d$E1)
