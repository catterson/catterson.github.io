mini[mini$insta.followers > 20000,]
mini$insta.followers[mini$insta.followers > 10000]
mini$insta.followers[mini$insta.followers > 10000] <- NA
hist(mini$insta.followers) # STILL AN OUTLIER?
mean(mini$insta.followers, na.rm = T)
median(mini$insta.followers, na.rm = T)
mini$insta.followers[mini$insta.followers == 0]
actual <- c(90, 1100, 1, 200, 270,
200, 1200, 1300, 1452,700)
myguess <- c(595.9459,595.9459,595.9459,595.9459,595.9459,
595.9459,595.9459,595.9459,595.9459,595.9459)
actual - myguess
sum(actual - myguess)
head(d)
plot(d$same.seat)
levels(d$same.seat)
levels(d$same.seat) <- c("near", "nope", "yes", "maybe") # renaming. KEEP ORDER!!!
plot(d$same.seat)
par(mfrow = c(1,2))
par(mfrow = c(1,2))
plot(d$same.seat)
plot(d$feet.relax)
hist(d$int2)
par(mfrow = c(1,1))
hist(d$int2)
par(mfrow = c(1,2))
plot(d$same.seat)
plot(d$feet.relax)
par(mfrow = c(1,1))
hist(d$int2)
par(mfrow = c(2,2))
plot(d$same.seat)
plot(d$feet.relax)
hist(d$int1)
hist(d$int2)
plot(d$same.seat)
levels(d$same.seat)[1]
levels(d$same.seat) <- c(3,4,1,2)
plot(d$same.seat)
levels(d$same.seat) <- c("near", "nope", "yes", "maybe") # renaming. KEEP ORDER!!!
mini[mini$insta.followers > 20000,]
mini <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv",
stringsAsFactors = T)
head(mini)
mean(mini$insta.followers, na.rm = T)
hist(mini$insta.followers)
## FINDING THEOUTLIER!!!!
range(mini$insta.followers, na.rm = T)
hist(mini$insta.followers)
median(mini$insta.followers, na.rm = T)
mini$insta.followers
mini$insta.followers[14]
mini$insta.followers[mini$insta.followers > 20000] # finds outlier for variable
mini[mini$insta.followers > 20000,] # finds outlier for entire dataset
!is.na(mini[mini$insta.followers > 20000,])
na.omit(mini[mini$insta.followers > 20000,])
mini[na.omit(mini$insta.followers) > 20000,]
mini[na.omit(mini$insta.followers) > 20000,] <- NA
names(selfes)
selfes <- read.csv("../datasets/Self-Esteem Dataset/data.csv",
stringsAsFactors = T,
na.strings = "0", sep = "\t")
selfes$age[selfes$age < 18 | selfes$age > 80] <- NA
hist(selfes$age, col = 'black', bor = 'white')
poskey.df <- selfes[,c(1:2,4,6,7)] # pos-keyed items (from the codebook)
negkey.df <- selfes[,c(3,5,8:10)] # neg-keyed items (from the codebook)
negkeyR.df <- 5-negkey.df # reverse scoring the neg-keyed items
SELFES.DF <- data.frame(poskey.df, negkeyR.df) # bringing it all 2gether.
selfes$SELFES <- rowMeans(SELFES.DF, na.rm = T) # creating the scale
hist(selfes$SELFES, col = 'black', bor = 'white', # the graph
main = "Histogram of Self-Esteem",
xlab = "Self-Esteem Score", breaks = 15)
mod0 <- lm(SELFES ~ 1, data = selfes)
mod1 <- lm(SELFES ~ age, data = selfes)
anova(mod0, mod1)
summary(mod0)
summary(mod1)
summary(mod0)
aov(mod0, mod1)
Anova(mod0, mod1)
anova(mod0, mod1)
mod2 <- lm(SELFES ~ selfes$country, data = selfes)
summary(mod2)
anova(mod1, mod2)
?anova
anova(mod1)
anova(mod2)
fitted.values(mod1)
residuals(mod1)
effects(mod1)
?effects
mod0 <- lm(SELFES ~ 1, data = selfes)
mod1 <- lm(SELFES ~ 1 + age, data = selfes)
summary(mod0)
summary(mod1)
summary(mod2)
anova(mod2)
effects(mod1)
mod0 <- lm(SELFES ~ 1, data = selfes)
mod1 <- lm(SELFES ~ 1 + age, data = selfes)
anova(mod0, mod1)
mod0 <- lm(SELFES ~ 1, data = mod0$model)
mod1 <- lm(SELFES ~ 1 + age, data = selfes)
anova(mod0, mod1)
mod0 <- lm(SELFES ~ 1, data = mod1$model)
anova(mod0, mod1)
summary(mod1)
mod0 <- lm(SELFES ~ 1, data = mod1$model)
summary(mod0)
mod0 <- lm(SELFES ~ 1, data = mod1$model)
mod1 <- lm(SELFES ~ age, data = selfes)
summary(mod0)
summary(mod1)
anova(mod0, mod1)
d <- read.csv("../datasets/Grad Onboard 2025/grad_onboard_SP25.csv",
stringsAsFactors = T)
head(d)
d <- read.csv("../datasets/Grad Onboard 2025/grad_onboard_SP25.csv",
stringsAsFactors = T)
head(d)
d$can.forloop
plot(d$can.forloop)
summary(d$can.forloop)
(15 + 10) - 8
(summary(d$can.forloop)[1] + summary(d$can.forloop)[2]) - summary(d$can.forloop)[3]
s <- summary(d$can.forloop)
(s[1] + s[2]) - s[3]
sample(1:nrow(d), nrow(d), replace = T)
sample(1:nrow(d), nrow(d), replace = T)
d[sample(1:nrow(d), nrow(d), replace = T), ]
d[sample(1:nrow(d), 2, replace = T), ]
d[sample(1:nrow(d), 200, replace = T), ]
d[sample(1:1000, 200, replace = T), ]
d[1,]
d[1,3]
d[1,3:5]
d[,d$can.forloop]
d[sample(1:nrow(d), nrow(d), replace = T), ]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
(s[1] + s[2]) - s[3]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
(s[1] + s[2]) - s[3]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
(s[1] + s[2]) - s[3]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
(s[1] + s[2]) - s[3]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
(s[1] + s[2]) - s[3]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
(s[1] + s[2]) - s[3]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
(s[1] + s[2]) - s[3]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
(s[1] + s[2]) - s[3]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
(s[1] + s[2]) - s[3]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
(s[1] + s[2]) - s[3]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
(s[1] + s[2]) - s[3]
bucket <- array()
for(i in c(1:1000)){
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
bucket[i] <- (s[1] + s[2]) - s[3]
}
hist(bucket)
mean(bucket)
hist(bucket)
mean(bucket)
bucket <- array()
for(i in c(1:1000)){
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
bucket[i] <- (s[1] + s[2]) - s[3]
}
hist(bucket)
mean(bucket)
bucket <- array()
for(i in c(1:1000)){
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
bucket[i] <- (s[1] + s[2]) - s[3]
}
hist(bucket)
mean(bucket)
set.seed(424242)
for(i in c(1:1000)){
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
bucket[i] <- (s[1] + s[2]) - s[3]
}
hist(bucket)
mean(bucket)
set.seed(424242)
for(i in c(1:1000)){
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
bucket[i] <- (s[1] + s[2]) - s[3]
}
hist(bucket)
mean(bucket)
bucket <- array()
set.seed(424243)
for(i in c(1:1000)){
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
bucket[i] <- (s[1] + s[2]) - s[3]
}
hist(bucket)
mean(bucket)
bucket <- array()
set.seed(424244)
for(i in c(1:1000)){
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
bucket[i] <- (s[1] + s[2]) - s[3]
}
hist(bucket)
mean(bucket)
for(i in c(1:1000)){
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
s <- summary(nd$can.forloop)
bucket[i] <- (s[1] + s[2]) - s[3]
}
hist(bucket)
mean(bucket)
greyScale <- colorRampPalette(c("pink","red"))
secretmessage <- function(r, col){
t <- seq(0,2*pi,length.out=100)
x <- r*sin(t)^3
y <- (13*r/16)*cos(t) - (5*r/16)*cos(2*t) - (2*r/16)*cos(3*t) - (r/16)*cos(4*t)
polygon(x,y,col=col,border=NA)
}
# create new plot canvas
plot.new()
# limits are approximate here
plot.window(xlim=c(-16,16),ylim=c(-16,13))
# use mapply to loop; invisible to turn off an annoying output.
invisible(mapply(secretmessage,seq(16,0,length.out=100),greyScale(100)))
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model") # jittered
abline(mod1, lwd = 5, col = 'red')
mod1 <- lm(self.skills ~ class.skills, data = d)
par(mfrow = c(1,2))
plot(self.skills ~ class.skills, data = d, main = "Overlapping Data")
plot(jitter(self.skills) ~ class.skills, data = d, main = "Jittered Data") # jittered
abline(mod1, lwd = 5, col = 'red')
coef(mod1)
coef(mod1)
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model") # jittered
abline(mod1, lwd = 5, col = 'red')
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model",
xlim = c(0,5)) # jittered
abline(mod1, lwd = 5, col = 'red')
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model",
xlim = c(0,50)) # jittered
abline(mod1, lwd = 5, col = 'red')
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model",
xlim = c(0,50), ylim = c(1:100)) # jittered
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model",
xlim = c(0,50), ylim = c(1,100)) # jittered
abline(mod1, lwd = 5, col = 'red')
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model",
xlim = c(0,50), ylim = c(1,30)) # jittered
abline(mod1, lwd = 5, col = 'red')
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model",
xlim = c(1,5)) # jittered
abline(mod1, lwd = 5, col = 'red')
mod1
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model",
xlim = c(1,5)) # jittered
abline(mod1, lwd = 5, col = 'red')
sum(mod1$residuals)
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model",
xlim = c(1,5)) # jittered
abline(mod1, lwd = 5, col = 'red')
sum(mod1$residuals^2)
SSE <- sum(mod1$residuals^2)
SSE
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model",
xlim = c(1,5)) # jittered
abline(mod1, lwd = 5, col = 'red')
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model",
xlim = c(1,5)) # jittered
abline(mod1, lwd = 5, col = 'red')
SSE
SST
SST <- sum((d$self.skills - mean(d$self.skills))^2)
SST
SST - SSE
par(mfrow = c(1,2))
plot(d$self.skills,
ylab = "Self-Perception of Skills",
xlab = "Index", main = "Mean as Model")
abline(h = mean(d$self.skills, na.rm = T), lwd = 5)
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model",
xlim = c(1,5)) # jittered
abline(mod1, lwd = 5, col = 'red')
par(mfrow = c(1,2))
plot(d$self.skills,
ylab = "Self-Perception of Skills",
xlab = "Index", main = "Mean as Model (SST)")
abline(h = mean(d$self.skills, na.rm = T), lwd = 5)
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model (SSE)",
xlim = c(1,5)) # jittered
abline(mod1, lwd = 5, col = 'red')
SST <- sum((d$self.skills - mean(d$self.skills))^2)
SST - SSE
(SST - SSE)/SST
par(mfrow = c(1,2))
plot(d$self.skills,
ylab = "Self-Perception of Skills",
xlab = "Index", main = "Mean as Model (SST)")
abline(h = mean(d$self.skills, na.rm = T), lwd = 5)
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model (SSE)",
xlim = c(1,5)) # jittered
abline(mod1, lwd = 5, col = 'red')
SST <- sum((d$self.skills - mean(d$self.skills))^2)
SST - SSE # a difference in errors when using the mean vs. our model
coef(mod)
coef(mod1)
coef(mod1)[2]
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
modx <- lm(self.skills ~ class.skills, data = nd)
coef(modx)[2]
bucket <- array()
for(i in c(1:1000)){
nd <- d[sample(1:nrow(d), nrow(d), replace = T), ]
modx <- lm(self.skills ~ class.skills, data = nd)
bucket[i] <- coef(modx)[2]
}
hist(bucket)
mean(bucket)
sd(bucket)
hist(bucket) # what do we expect to see?
hist(bucket) # what do we expect to see?
abline(v = mean(bucket), lwd = 5)
hist(bucket) # what do we expect to see?
abline(v = mean(bucket), lwd = 5)
abline(v = mean(bucket) + 1.96*sd(bucket), lwd = 2, lty = 'dashed')
abline(v = mean(bucket) - 1.96*sd(bucket), lwd = 2, lty = 'dashed')
par(mfrow = c(1,2))
plot(d$self.skills,
ylab = "Self-Perception of Skills",
xlab = "Index", main = "Mean as Model (SST)")
abline(h = mean(d$self.skills, na.rm = T), lwd = 5)
plot(jitter(self.skills) ~ class.skills, data = d, main = "Linear Model (SSE)",
xlim = c(1,5)) # jittered
abline(mod1, lwd = 5, col = 'red')
mod1
2 - 1.95 + .38 * 1
1.95 + .38
summary(mod1)$r.squared #
#| include: false
## Q1. Load the mini_class dataset.
mini <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv", stringsAsFactors = T)
nrow(mini)
hist(mini$hrs.sleep)
plot(mini$hrs.sleep)
hist(mini$hrs.sleep)
plot(mini$hrs.sleep)
## Q3. What is the average of hrs.sleep?
## (Round to two decimal places for the check-in)
mean(mini$hrs.sleep)
mean(mini$hrs.sleep, na.rm = T)
library(psych)
describe(mini$hrs.sleep)
describe(mini$hrs.sleep)
describe(mini$hrs.sleep)
## Q3. What is the average of hrs.sleep?
## (Round to two decimal places for the check-in)
mean(mini$hrs.sleep, na.rm = T)
## Q3. What is the average of hrs.sleep?
## (Round to two decimal places for the check-in)
mean(mini$hrs.sleep, na.rm = T)
mini <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv", stringsAsFactors = T)
## Call this mini to follow along with professor's code.
## How many individuals are in this dataset?
nrow(mini)
describe(mini$hrs.sleep) # from the psych package!
describe(mini$hrs.sleep)
?psych
sd(mini$hrs.sleep, na.rm = T)
describe(mini$hrs.sleep) # from the psych package!
hist(mini$hrs.sleep)
(5 - 7)/1.5
(0 - 7)/1.5
sd(mini$thirsty, na.rm = T)
mean(mini$height, na.rm = T)
range(mini$height, na.rm = T)
hist(mini$height)
mini$height[mini$height < 20 | mini$height > 100]
mini$height[mini$height < 20 | mini$height > 100] <- c(NA, NA, 61, 66, NA, NA, NA, NA, NA, 60, NA, 72, NA, NA)
mini$height[c(mini$height < 20 | mini$height > 100) & !is.na(mini$height)]
mini$height[mini$height < 20 | mini$height > 100]
mini$height[c(mini$height < 20 | mini$height > 100) & !is.na(mini$height)]
mini$height[c(mini$height < 20 | mini$height > 100) & !is.na(mini$height)] <- c(61, 66, 60, 72, NA)
mean(mini$height, na.rm = T)
hist(mini$height)
names(mini)
mini$happy
names(mini) # looking at the names of our variables.
HAPPY.df <- data.frame(mini$happy, mini$selfesteem, mini$bored, mini$tired, mini$satlife)
HAPPY.df
range(HAPPY.df)
range(HAPPY.df, na.rm = T)
HAPPY.df <- data.frame(mini$happy, mini$selfesteem, 10-mini$bored, 10-mini$tired, mini$satlife)
HAPPY.df
library(psych) # do this every time you restart R.
alpha(HAPPY.df)
alpha(HAPPY.df)
HAPPY2.df <- data.frame(mini$happy, mini$selfesteem, 10-mini$tired, mini$satlife)
alpha(HAPPY2.df)
alpha(HAPPY2.df)
HAPPY2.df
rowMeans(HAPPY2.df
rowMeans(HAPPY2.df)
HAPPY2.df
rowMeans(HAPPY2.df)
HAPPY2.df
rowMeans(HAPPY2.df, na.rm = T)
mini$HAPPYSCALE <- rowMeans(HAPPY2.df, na.rm = T)
hist(mini$HAPPYSCALE)
rowMeans(HAPPY2.df, na.rm = T)
rowMeans(HAPPY2.df)
greyScale <- colorRampPalette(c("pink","red"))
secretmessage <- function(r, col){
t <- seq(0,2pi,length.out=100)
greyScale <- colorRampPalette(c("pink","red"))
secretmessage <- function(r, col){
t <- seq(0,2*pi,length.out=100)
x <- rsin(t)^3
y <- (13r/16)cos(t) - (5r/16)cos(2t) - (2r/16)cos(3t) - (r/16)cos(4t)
greyScale <- colorRampPalette(c("pink","red"))
secretmessage <- function(r, col){
t <- seq(0,2*pi,length.out=100)
x <- r*sin(t)^3
y <- (13*r/16)cos(t) - (5*r/16)cos(2t) - (2*r/16)cos(3*t) - (r/16)cos(4*t)
greyScale <- colorRampPalette(c("pink","red"))
secretmessage <- function(r, col){
t <- seq(0,2*pi,length.out=100)
x <- r*sin(t)^3
y <- (13*r/16)*cos(t) - (5*r/16)cos(2t) - (2*r/16)cos(3*t) - (r/16)cos(4*t)
greyScale <- colorRampPalette(c("pink","red"))
secretmessage <- function(r, col){
t <- seq(0,2*pi,length.out=100)
x <- r*sin(t)^3
y <- (13*r/16)*cos(t) - (5*r/16)*cos(2t) - (2*r/16)*cos(3*t) - (r/16)*cos(4*t)
greyScale <- colorRampPalette(c("pink","red"))
secretmessage <- function(r, col){
t <- seq(0,2*pi,length.out=100)
x <- r*sin(t)^3
y <- (13*r/16)*cos(t) - (5*r/16)*cos(2*t) - (2*r/16)*cos(3*t) - (r/16)*cos(4*t)
polygon(x,y,col=col,border=NA)
}
plot.new()
plot.window(xlim=c(-16,16),ylim=c(-16,13))
invisible(mapply(secretmessage,seq(16,0,length.out=100),greyScale(100)))
greyScale <- colorRampPalette(c("pink","red"))
secretmessage <- function(r, col){
t <- seq(0,2*pi,length.out=100)
x <- r*sin(t)^3
y <- (13*r/16)*cos(t) - (5*r/16)*cos(2*t) - (2*r/16)*cos(3*t) - (r/16)*cos(4*t)
polygon(x,y,col=col,border=NA)
}
plot.new()
plot.window(xlim=c(-16,16),ylim=c(-16,13))
invisible(mapply(secretmessage,seq(16,0,length.out=100),greyScale(100)))
dat <- read.csv("~/Downloads/Z_MEGASurvey_SP25.csv", stringsAsFactors = T)
dat[] <- lapply(dat, gsub, pattern = "1 - Strongly Disagree", replacement = 1, fixed = TRUE)
dat[] <- lapply(dat, gsub, pattern = "2 - Disagree", replacement = 2, fixed = TRUE)
dat[] <- lapply(dat, gsub, pattern = "3 - Neutral", replacement = 3, fixed = TRUE)
dat[] <- lapply(dat, gsub, pattern = "4 - Agree", replacement = 4, fixed = TRUE)
dat[] <- lapply(dat, gsub, pattern = "5 - Strongly Agree", replacement = 5, fixed = TRUE)
## DATA CLEANING CODE :
dat[] <- lapply(dat, gsub, pattern = "0 - Never", replacement = 0, fixed = TRUE)
dat[] <- lapply(dat, gsub, pattern = "1 - Seldom", replacement = 1, fixed = TRUE)
dat[] <- lapply(dat, gsub, pattern = "2 - Sometimes", replacement = 2, fixed = TRUE)
dat[] <- lapply(dat, gsub, pattern = "3 - Frequently", replacement = 3, fixed = TRUE)
dat[] <- lapply(dat, gsub, pattern = "4 - Always", replacement = 4, fixed = TRUE)
head(dat)
names(dat)[8:111]
names(dat)
names(dat)
lapply(names(dat)[8:114], gsub, pattern = "Finally..answer.these.questions...", replacement = "", fixed = TRUE)
names(dat)
lapply(names(dat)[8:114], gsub, pattern = "Finally..answer.these.questions...", replacement = "", fixed = TRUE)
lapply(names(dat)[8:114], gsub, pattern = "Finally..answer.these.questions...", replacement = "", fixed = FALSE)
## convert the strings to numeric data - run this code for the START and END of the scale
cols <- 8:114 # first number STARTS your likert scale; last number ENDS the scale
dat[,cols] <- sapply(dat[,cols], as.numeric)
write.csv(dat, "~/Downloads/mega_class_SP25.csv", row.names = F)
colnames(dat)[grepl("Finally..answer.these.questions...", colnames(dat))]
library(dplyr)
?rename_with
?gsub
rename_with(dat[8:114], gsub("Finally..answer.these.questions...", ""))
rename_with(dat[8:114], gsub("Finally..answer.these.questions...", x = ""))
rename_with(dat[8:114], gsub("Finally..answer.these.questions...", "", .x))
rename_with(dat[8:114], gsub("Finally..answer.these.questions...", "", .x, fixed = T))
.1 + .2
