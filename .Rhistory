for (i in 1:length(path)){
hold <- read.csv(path[[i]])
hold <- hold[hold$Timestamp > "2025/01/01",] # note : errors mean missing data from this semester; identify i to find empty checkin
hold <- data.frame(hold[,2], 1)
names(hold) <- c("Username", paste("CI", i, sep = ""))
ci.data[[i]] <- hold[,1:2]
}
i
path = list.files(pattern="*.csv")
path # paste transposed into excel file so can tell students which they missed.
# Load Data
ci.data <- list()
for (i in 1:length(path)){
hold <- read.csv(path[[i]])
hold <- hold[hold$Timestamp > "2025/01/01",] # note : errors mean missing data from this semester; identify i to find empty checkin
hold <- data.frame(hold[,2], 1)
names(hold) <- c("Username", paste("CI", i, sep = ""))
ci.data[[i]] <- hold[,1:2]
}
i
ci.data <- list()
for (i in 1:length(path)){
hold <- read.csv(path[[i]])
hold <- hold[hold$Timestamp > "2025/01/01",] # note : errors mean missing data from this semester; identify i to find empty checkin
hold <- data.frame(hold[,2], 1)
names(hold) <- c("Username", paste("CI", i, sep = ""))
ci.data[[i]] <- hold[,1:2]
}
path = list.files(pattern="*.csv")
path # paste transposed into excel file so can tell students which they missed.
# Load Data
ci.data <- list()
for (i in 1:length(path)){
hold <- read.csv(path[[i]])
hold <- hold[hold$Timestamp > "2025/01/01",] # note : errors mean missing data from this semester; identify i to find empty checkin
hold <- data.frame(hold[,2], 1)
names(hold) <- c("Username", paste("CI", i, sep = ""))
ci.data[[i]] <- hold[,1:2]
}
i
path = list.files(pattern="*.csv")
path # paste transposed into excel file so can tell students which they missed.
# Load Data
ci.data <- list()
for (i in 1:length(path)){
hold <- read.csv(path[[i]])
hold <- hold[hold$Timestamp > "2025/01/01",] # note : errors mean missing data from this semester; identify i to find empty checkin
hold <- data.frame(hold[,2], 1)
names(hold) <- c("Username", paste("CI", i, sep = ""))
ci.data[[i]] <- hold[,1:2]
}
i
path = list.files(pattern="*.csv")
path # paste transposed into excel file so can tell students which they missed.
# Load Data
ci.data <- list()
for (i in 1:length(path)){
hold <- read.csv(path[[i]])
hold <- hold[hold$Timestamp > "2025/01/01",] # note : errors mean missing data from this semester; identify i to find empty checkin
hold <- data.frame(hold[,2], 1)
names(hold) <- c("Username", paste("CI", i, sep = ""))
ci.data[[i]] <- hold[,1:2]
}
i
path = list.files(pattern="*.csv")
path # paste transposed into excel file so can tell students which they missed.
# Load Data
ci.data <- list()
for (i in 1:length(path)){
hold <- read.csv(path[[i]])
hold <- hold[hold$Timestamp > "2025/01/01",] # note : errors mean missing data from this semester; identify i to find empty checkin
hold <- data.frame(hold[,2], 1)
names(hold) <- c("Username", paste("CI", i, sep = ""))
ci.data[[i]] <- hold[,1:2]
}
i
for(i in 1:length(ci.data)){ # for when you don't forget to have all students have email
print(head(ci.data[[i]]))}
## MERGING
core <- matched
missing <- list()
for(i in c(1:length(ci.data))){
core <- merge(core, ci.data[[i]], by = "Username", all.x = TRUE, all.y = FALSE)
missing[[i]] <- subset(ci.data[[i]], !(Username %in% core$Username))
core <- unique(core)
}
## ORGANIZE DATA FROM MISSING FOLKS
missing
Merged=Reduce(function(x, y) merge(x, y,all.x=T, all.y = T,by="Username"),missing)
Merged$TOTAL <- rowSums(Merged[,2:length(Merged)], na.rm = T)
missingfolks <- unique(with(Merged, data.frame(Username, TOTAL))) # data frame of missing folks.
missingfolks # can use this list to ID missing usernames; fill in rosterusername dataset; then rerun script.
names(core)
core$CITOTAL <- rowSums(core[,10:ncol(core)], na.rm = T)
hist(core$CITOTAL)
write.csv(core, "../checkinsucb_SP25.csv", row.names = FALSE)
write.csv(missingfolks, "../missingfolks_SP25.csv", row.names = FALSE)
core$Exam
core$CITOTAL
summary(lm(EXAM ~ CIT, data = core))
summary(lm(Exam ~ CIT, data = core))
summary(lm(Exam ~ CITOTAL, data = core))
summary(lm(Quiz ~ CITOTAL, data = core))
summary(lm(Exam ~ CITOTAL, data = core))
grades
names(grades)
exams <- grades[,c(1:9)]
names(exams)
summary(lm(Exam ~ CITOTAL, data = core))
summary(lm(scale(Exam) ~ scale(CITOTAL), data = core))
mod <- lm(scale(Exam) ~ scale(CITOTAL), data = core)
summary(mod)
confint(mod)
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 13*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 13*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l", col = 'red'))
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 13*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="d", col = 'red'))
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 13*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="p", col = 'red'))
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 13*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type=19, col = 'red'))
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 13*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, pch=19, col = 'red'))
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 13*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l", col = 'red', lwd = 9))
d <- read.csv("~/Downloads/0.1_Stats_Onboard_DVC_FA25.csv", stringsAsFactors = T)
names(d)
d <- d[,-c(2:7, 23:26, 43)]
names(d)
d <- read.csv("~/Downloads/0.1_Stats_Onboard_DVC_FA25.csv", stringsAsFactors = T)
names(d)
d <- d[,-c(2:4, 7:9, 30:36)]
names(d)
renaming <- c("time","class","major","has.laptop","has.phone","take.stats","write.code", "know.prog",
"self.skills", "class.skills", "self.excite", "class.excite", "self.prep", "class.prep",
"learn.concept", "learn.r", "can.science", "should.science", "truth.people",
"not.psychsci", "perf.pred", "noperf.pred","too.complex","epistemology")
names(d) <- renaming
names(d)
d <- read.csv("~/Downloads/0.1_Stats_Onboard_DVC_FA25.csv", stringsAsFactors = T)
names(d)
d <- d[,-c(2:4, 7:9, 30:35)]
names(d)
renaming <- c("time","class","major","has.laptop","has.phone","take.stats","write.code", "know.prog",
"self.skills", "class.skills", "self.excite", "class.excite", "self.prep", "class.prep",
"learn.concept", "learn.r", "can.science", "should.science", "truth.people",
"not.psychsci", "perf.pred", "noperf.pred","too.complex","epistemology")
names(d) <- renaming
head(d)
names(d)
d[] <- lapply(d, gsub, pattern = "1 (Strongly Disagree)", replacement = "1", fixed = TRUE)
d[] <- lapply(d, gsub, pattern = "5 (Strongly Agree)", replacement = "5", fixed = TRUE)
head(d) # checking my work
tail(d) # checking my work
write.csv(d, "~/Downloads/dvc_onboard_SP25.csv", row.names = F)
write.csv(d, "~/Downloads/dvc_onboard_FA25.csv", row.names = F)
d <- read.csv("~/Dropbox/!WHY STATS/Chapter Datasets/hormone_data.csv", stringsAsFactors = T)
## Q1. How many individuals are in this dataset?
nrow(d)
## Q2. How many variables are in this dataset?
ncol(d)
## Q9. What is the standard deviation of the variable test?
sd(d$test)
## Q9. What is the standard deviation of the variable test?
sd(d$test, na.rm = T)
d$test - mean(d$test)
d$test - mean(d$test, na.rm = T)
sum(d$test - mean(d$test, na.rm = T), na.rm = T)
d$test - mean(d$test, na.rm = T)
resid <- d$test - mean(d$test, na.rm = T)
sum(resid^2)
sum(resid^2, na.rm = T)
SST <- sum(resid^2, na.rm = T)
SST/nrow(d)
sqrt(SST/nrow(d))
sqrt(SST)/nrow(d)
## Q9. What is the standard deviation of the variable test?
sd(d$test, na.rm = T)
sqrt(SST/nrow(d))
d <- read.csv("~/Downloads/0.1_Stats_Onboard_DVC_FA25.csv", stringsAsFactors = T)
names(d)
d <- d[,-c(2:4, 7:9, 30:35)]
names(d)
renaming <- c("time","class","major","has.laptop","has.phone","take.stats","write.code", "know.prog",
"self.skills", "class.skills", "self.excite", "class.excite", "self.prep", "class.prep",
"learn.concept", "learn.r", "can.science", "should.science", "truth.people",
"not.psychsci", "perf.pred", "noperf.pred","too.complex","epistemology")
data.dictionary <- data.frame(variable = renaming, item = names(d))
write.csv(data.dictionary, "~/Downloads/CODEBOOK_grad_onboard_SP25.csv", row.names = F)
datasets::sleep
d <- datasets::sleep
d
d <- read.csv("~/Dropbox/Research/DVC - MyExperience Survey/MyExperience Survey Data Analyses/myexperience_Psy214_SP21.csv", stringsAsFactors = T)
names(d)
nrow(d)
hist(d$posexp, main = "Histogram of Positive Experiences at DVC",
xlab = "I have had an overall positive experience at DVC.")
plot(as.factor(d$posexp), main = "Histogram of Positive Experiences at DVC",
xlab = "I have had an overall positive experience at DVC.")
hist(d$st.GPA)
library(psych)
summary(d$posexp)
describe(d$posexp)
d <- read.csv("~/Downloads/0.1_HonorStats_Onboard_FA25-2.csv", stringsAsFactors = T)
d <- read.csv("~/Downloads/0.1_HonorStats_Onboard_FA25.csv", stringsAsFactors = T)
names(d)
d <- d[,-c(2:6, 23:26, 43)]
names(d)
renaming <- c("time", "area", "has.laptop", "write.code", "know.prog", "has.data", "know.r",
"can.import", "can.clean", "can.graph", "can.render", "can.lm",
"can.interp", "can.pvalue", "can.sevsd", "can.95ci", "can.forloop",
"self.skills", "class.skills", "self.excite", "class.excite", "self.prep", "class.prep", "learn.concept", "learn.r",
"can.science", "should.science", "truth.people", "not.psychsci", "perf.pred", "noperf.pred","too.complex",
"epistemology", "consent")
data.dictionary <- data.frame(variable = renaming, item = names(d))
write.csv(data.dictionary, "~/Downloads/CODEBOOK_honor_onboard_FA25.csv", row.names = F)
names(d) <- renaming
head(d)
names(d)
d[,c(7:16)]
## Shortening string data
d[] <- lapply(d, gsub, pattern = "Maybe I Could Do This?", replacement = "Maybe", fixed = TRUE)
d[] <- lapply(d, gsub, pattern = "Definitely Could Do This", replacement = "Yes", fixed = TRUE)
d[] <- lapply(d, gsub, pattern = "Not at All", replacement = "No", fixed = TRUE)
## Reworking likert scale data.
d[] <- lapply(d, gsub, pattern = "1 (Strongly Disagree)", replacement = "1", fixed = TRUE)
d[] <- lapply(d, gsub, pattern = "5 (Strongly Agree)", replacement = "5", fixed = TRUE)
head(d) # checking my work
tail(d) # checking my work
d$consent == 'yes, you can add my responses to a class dataset.'
d <- d[d$consent == 'yes, you can add my responses to a class dataset.',] # we grant consent.
write.csv(d, "~/Dropbox/!GRADSTATS/honor_FA25_datasets/Onboarding Data/honor_onboard_FA25.csv", row.names = F)
bucket <- array() # one place to save output (1-dimensional)
bucket
bucket <- array() # this defines an empty array; a place to "store" my values
bucket <- array() # this defines an empty array; a place to "store" my values
for(i in c(1:100)){ # this starts the for-loop, and tells R I want to repeat some process 100 times, and keep track with the variable i
bucket[i] <- i*i # this calculates i*i, and then assigns this value to bucket[position i]
# since i updates every time we iterate through the loop, each i value will increase from 1 to 100
}
for(i in c(1:100)){
bucket[i] <- i*i
for(i in c(1:100)){ # this starts the for-loop, and tells R I want to repeat some process 100 times, and keep track with the variable i
bucket[i] <- i*i # this calculates i*i, and then assigns this value to bucket[position i]
1+1
)
bucket <- array() # this defines an empty array; a place to "store" my values
for(i in c(1:100)){ # this starts the for-loop, and tells R I want to repeat some process 100 times, and keep track with the variable i
bucket[i] <- i*i # this calculates i*i, and then assigns this value to bucket[position i]
# since i updates every time we iterate through the loop, each i value will increase from 1 to 100
}
bucket
nrow(bucket)
length(bucket)
squareroot?
#### ACTIVITY : write a loop to create a variable called manydoors that contains string data "door1", "door2", ..."door100"
?paste # code you will need.
?squareroot
??squareroot
sqrt(bucket)
bucket^.5
plot(bucket)
?paste
paste("door", 1, sep = "")
paste("door", 1, sep = " ")
paste("this is my favorite door", 1, sep = " ")
paste("this is my favorite door", 1, "is cool", sep = " ")
for(i in c(1:1000000)){
paste("door", i, sep = " ")
}
bucket
doorselection <- array()
for(i in c(1:1000000)){
doorselection[i] <- paste("door", i, sep = " ")
}
doorselection
doorselection <- array()
for(i in c(1:1000000)){
doorselection[i] <- paste("door", 1, sep = " ")
}
doorselection
d <- read.csv("~/Dropbox/!GRADSTATS/Datasets/CLASS DATASETS - 102 - FA25/Onboarding Data/honor_onboard_FA25.csv", stringsAsFactors = T)
d
View(d)
nrow(d)
length(d)
?length
nrow(d)
length(d)
d[2, 4]
names(d)
d$write.code
d$write.code[4]
names(d)[2]
plot(d$area)
plot(d$area)
d$area
### levels()
levels(d$area)
levels(d$area)[4]
levels(d$area)[4]
levels(d$area)[4] <- "Developmental"
levels(d$area)
### graphing.
plot(d$area)
levels(d$area)[1]
levels(d$area)[1] <- "BNS"
### graphing.
plot(d$area)
summary(d$area)
table(d$area)
d$self.skills
d$class.skills
hist(d$self.skills)
hist(d$class.skills)
par(mfrow = c(1,2))
hist(d$self.skills)
hist(d$class.skills)
hist(d$self.skills, xlim = c(1,5))
hist(d$class.skills, xlim = c(1,5))
#| include: false
d <- read.csv("../datasets/Self-Esteem Dataset/data.csv", stringsAsFactors = T, na.strings = "0", sep = "\t")
head(d)
names(d)
summary(as.factor(d$Q4))
SELFES.df <- data.frame(d[,c(1:2,4,6,7)], 5-d[,c(3,5,8:10)])
summary(SELFES.df)
library(psych)
alpha(SELFES.df)
d$SELFES <- rowMeans(SELFES.df, na.rm = T)
hist(d$SELFES, col = 'black', bor = 'white',
main = "Histogram of Self-Esteem",
xlab = "Self-Esteem Score", breaks = 15)
d <- read.csv("~/Library/CloudStorage/Dropbox/!WHY STATS/Chapter Datasets/covid_behavior_data.csv", stringsAsFactors=TRUE)
View(d)
## Loading Data
d <- read.csv("~/Library/CloudStorage/Dropbox/!WHY STATS/Chapter Datasets/covid_behavior_data.csv", stringsAsFactors=TRUE)
head(d)
tail(d)
nrow(d)
variables(d)
length(d)
ncol(d)
names(d)
## Categorical Data
d$political_party
plot(d$political_party)
summary(d$political_party)
## Loading Data
d <- read.csv("~/Library/CloudStorage/Dropbox/!WHY STATS/Chapter Datasets/covid_behavior_data.csv", stringsAsFactors=F)
plot(d$political_party)
plot(d$political_party)
plot(d$political_party)
d$political_party
, stringsAsFactors=T
## Loading Data
d <- read.csv("~/Library/CloudStorage/Dropbox/!WHY STATS/Chapter Datasets/covid_behavior_data.csv", stringsAsFactors=T)
plot(d$political_partyy)
d$political_partyy
plot(d$political_party)
table(d$political_party)
## Numeric Data
names(d)
EXTRA
## Numeric Data
names(d)
hist(d$EXTRA)
d$EXTRA
summary(d$EXTRA)
mean(d$EXTRA)
mean(d$EXTRA, na.rm = T) # tells R to remove NAs (treat them as missing.)
mean(d$political_party)
mean(d$political_party, na.rm = T)
summary(d)
d <- read.csv("~/Dropbox/!WHY STATS/Chapter Datasets/World-happiness-report-2024.csv", stringsAsFactors = T)
head(d)
nrow(d)
names(d)
Freedom.to.make.life.choices
## ICE-BREAKER : describe a time your parents/caregivers did NOT give you freedom to make life choices.
## what is the error message saying? (TRANSLATE!)
## how do I fix the problem?
d$Freedom.to.make.life.choices
max(d$Freedom.to.make.life.choices)
max(d$Freedom.to.make.life.choices, na.rm = T)
summary(d$Freedom.to.make.life.choices)
## PROFESSOR DEMO HANDS OFF THE KEYBOARD NO COPYING!!!
plot(d$Freedom.to.make.life.choices)
abline(h = (mean = d$Freedom.to.make.life.choices, na.rm = T), lwd = 5)
abline(h = mean(d$Freedom.to.make.life.choices, na.rm = T), lwd = 5)
abline(h = median(d$Freedom.to.make.life.choices, na.rm = T), lwd = 5, col = "blue")
d$Freedom.to.make.life.choices[1] <- 10
plot(d$Freedom.to.make.life.choices)
d$Freedom.to.make.life.choices[1] <- 5
plot(d$Freedom.to.make.life.choices)
d$Freedom.to.make.life.choices[1:3] <- 3
plot(d$Freedom.to.make.life.choices)
d$Freedom.to.make.life.choices[1:5] <- 2
plot(d$Freedom.to.make.life.choices)
abline(h = mean(d$Freedom.to.make.life.choices, na.rm = T), lwd = 5)
abline(h = median(d$Freedom.to.make.life.choices, na.rm = T), lwd = 5, col = "blue")
summary(d$Freedom.to.make.life.choices)
## Loading and Checking Data
d <- read.csv("~/Dropbox/!WHY STATS/Chapter Datasets/World-happiness-report-2024.csv", stringsAsFactors = T)
summary(d$Freedom.to.make.life.choices)
hist(d$Freedom.to.make.life.choices)
par(mfrow = c(1,2))
hist(d$Freedom.to.make.life.choices)
plot(d$Freedom.to.make.life.choices)
hist(d$Freedom.to.make.life.choices, main = "Freedom to Make Life (Hist)")
plot(d$Freedom.to.make.life.choices,
main = "Freedom to Make Life (Plot)")
hist(d$Freedom.to.make.life.choices, main = "Freedom to Make Life (Hist)")
par(mfrow = c(1,1))
hist(d$Freedom.to.make.life.choices, main = "Freedom to Make Life (Hist)")
abline(v = mean(d$Freedom.to.make.life.choices, na.rm = T), lwd = 5)
mean(d$Freedom.to.make.life.choices)
mean(d$Freedom.to.make.life.choices, na.rm = T)
sd(d$Freedom.to.make.life.choices)
sd(d$Freedom.to.make.life.choices, na.rm = T)
summary(d$Social.support)
hist(d$Social.support)
abline(h = mean(d$Social.support, na.rm = T), lwd = 5)
abline(v = mean(d$Social.support, na.rm = T), lwd = 5)
sd(d$Social.support)
sd(d$Social.support, na.rm = T)
hist(d$Social.support)
abline(v = mean(d$Social.support, na.rm = T), lwd = 5)
sd(d$Social.support, na.rm = T)
## ANOTHER WAY.
plot(d$Social.support)
plot(d$Social.support)
abline(h = mean(d$Social.support, na.rm = T), lwd = 5)
d$Social.support
residual <- d$Social.support - mean(d$Social.support, na.rm = T
residual
residual <- d$Social.support - mean(d$Social.support, na.rm = T)
residual
sum(residual)
sum(residual, na.rm = T)
sumresid <- sum(residual, na.rm = T)
sumresid
round(sumresid, 5)
summary(d$Social.support)
median(d$Social.support)
median(d$Social.support, na.rm = T)
d$Dystopia...residual
d <- read.csv("~/Dropbox/!GRADSTATS/Datasets/CLASS DATASETS - 102 - FA25/Onboarding Data/honor_onboard_FA25.csv", stringsAsFactors = T, na.strings = "")
par(mfrow = c(1,2))
hist(d$self.skills, breaks = c(0:5),
col = 'black', bor = 'white', main = "Computer Skills\n(Self-Perceptions)")
abline(v = mean(d$self.skills), lwd = 4, col = 'red')
abline(v = mean(d$self.skills) + sd(d$self.skills),
lwd = 2, lty = "dashed", col = 'red')
abline(v = mean(d$self.skills) - sd(d$self.skills),
lwd = 2, lty = "dashed", col = 'red')
d <- read.csv("~/Dropbox/!GRADSTATS/Datasets/Perceptions of the Wealthy/Dawtry 2015 Study 1a.csv", # my file path
stringsAsFactors = T, # to convert strings into factors
na.strings = "") # empty data --> NA
hist(d$fairness)
hist(d$gender)
plot(d$gender)
plot(as.factor(d$gender))
hist(d$Household_Income, breaks = 20,
main = "Household Income",
xlab = "Household Income (USD)")
boxplot(d$Household_Income)
summary(d$Household_Income, na.rm = T)
sd(d$Household_Income, na.rm = T)
hist(d$Household_Income, breaks = 20,
main = "Household Income",
xlab = "Household Income (USD)")
summary(d$Household_Income, na.rm = T)
-   standard deviation = `{r} round(sd(d$Household_Income), 2)`)
sd(d$Household_Income, na.rm = T)
plot(as.factor(d$gender))
summary(d$gender)/length(d$gender)
d$genderFactor <- as.factor(d$gender)
summary(d$genderFactor)/length(d$genderFactor)
levels(d$genderFactor)
levels(d$genderFactor) <- c("Male", "Female")
plot(d$genderFactor)
