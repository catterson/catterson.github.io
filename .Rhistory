names(covid)
covid
summary(covid)
summary(covid$political_party)
nrow(covid)
names(covid)
hist(covid$Handwash)
plot(covid$Handwash)
covid$Handwash
hist(covid$Handwash)
hist(covid$Handwash, main = "Frequency of Handwashing")
hist(covid$Handwash, main = "Frequency of Handwashing",
xlab = "Handwashing Behavior (Self-Reported)")
hist(covid$Handwash, main = "Frequency of Handwashing",
xlab = "Handwashing Behavior (Self-Reported)",
col = 'black', bor = 'white')
plot(covid$political_party)
summary(covid)
summary(covid$political_party)
plot(covid$political_party, xlab = "Political Party")
levels(covid$political_party)
## BONUS : FEEL FREE TO IGNORE.
levels(covid$political_party)
covid$POLITICAL
## BONUS : FEEL FREE TO IGNORE.
covid$POLITICAL <- covid$political_party
covid$POLITICAL
plot(covid$POLITICAL)
levels(covid$POLITICAL)
levels(covid$POLITICAL)
levels(covid$POLITICAL) <- c("Democrat", "Independent", "Republican")
plot(covid$POLITICAL)
as.string(covid$political_party)
as.character(covid$political_party)
plot(as.character(covid$political_party))
##
covid <- read.csv("~/Dropbox/Teaching Datasets/covid_behavior_data.csv")
# covid <- LONG_NAME_HERE # how to rename an object if you want to.
# LONG_NAME_HERE is made up; covid_behavior_dataset
covid
head(covid)
names(covid)
summary(covid)
summary(covid$political_party)
# Datasets are Fun To Load : Load the “covid_behavior_dataset.csv” dataset. Check to make sure the data loaded correctly with the head() function. Report the sample size and names of the variables from this dataset, and look over the code book. What are some variables that seem interesting to you? How might you use these variables in a linear model (either as a DV or as IVs?)
nrow(covid)
names(covid)
## age is interesting!!
## Handwashing is interesting!!!
## Handwashing ~ age + error : I want to see if people wash their hands more as they get older.
## Number Problems : Graph two numeric variables from this dataset. Change the arguments on the graph to make them look “nice”. Describe what you learn about the individuals for each variable (no stats terminology yet!) and what additional questions you have about the variables.
covid$Handwash
hist(covid$Handwash, main = "Frequency of Handwashing",
xlab = "Handwashing Behavior (Self-Reported)",
col = 'black', bor = 'white')
# plot(covid$Handwash) # not an effective way to visualize!
## more people handwash than not (more scores on higher end)
## very few people said they never wash their hands.
## OTHER QUESTIONS I HAVE :
### is there a pattern between washing hands and age?
### is there a pattern between washing hands and illness (not a varible in the dataset...)
plot(covid$political_party, xlab = "Political Party")
covid <- read.csv("~/Dropbox/Teaching Datasets/covid_behavior_data.csv", stringsAsFactors = T)
# covid <- LONG_NAME_HERE # how to rename an object if you want to.
# LONG_NAME_HERE is made up; covid_behavior_dataset
covid
head(covid)
names(covid)
summary(covid)
summary(covid$political_party)
# Datasets are Fun To Load : Load the “covid_behavior_dataset.csv” dataset. Check to make sure the data loaded correctly with the head() function. Report the sample size and names of the variables from this dataset, and look over the code book. What are some variables that seem interesting to you? How might you use these variables in a linear model (either as a DV or as IVs?)
nrow(covid)
names(covid)
## age is interesting!!
## Handwashing is interesting!!!
## Handwashing ~ age + error : I want to see if people wash their hands more as they get older.
## Number Problems : Graph two numeric variables from this dataset. Change the arguments on the graph to make them look “nice”. Describe what you learn about the individuals for each variable (no stats terminology yet!) and what additional questions you have about the variables.
covid$Handwash
hist(covid$Handwash, main = "Frequency of Handwashing",
xlab = "Handwashing Behavior (Self-Reported)",
col = 'black', bor = 'white')
# plot(covid$Handwash) # not an effective way to visualize!
## more people handwash than not (more scores on higher end)
## very few people said they never wash their hands.
## OTHER QUESTIONS I HAVE :
### is there a pattern between washing hands and age?
### is there a pattern between washing hands and illness (not a varible in the dataset...)
plot(covid$political_party, xlab = "Political Party")
summary(covid$political_party)
## BONUS : FEEL FREE TO IGNORE.
covid$POLITICAL <- covid$political_party # creating a copy of political_party
covid$POLITICAL # the copy
plot(covid$POLITICAL)
levels(covid$POLITICAL) <- c("Democrat", "Independent", "Republican")
plot(covid$POLITICAL)
covid <- read.csv("~/Dropbox/Teaching Datasets/covid_behavior_data.csv", stringsAsFactors = T)
covid <- read.csv("~/Dropbox/Teaching Datasets/covid_behavior_data.csv", stringsAsFactors = T)
covid <- read.csv("~/Dropbox/Teaching Datasets/covid_behavior_data.csv", stringsAsFactors = T)
head(covid)
narc <- read.csv("~/Dropbox/!GRADSTATS/Datasets/Narcissism/data.csv", stringsAsFactors = T)
head(narc)
names(narc)
hist(narc$score)
NARC.df <- narc[,2:41]
head(NARC.df)
negkey <- c(1:3,6,8,11:14,16,21,24:25,29:31,33:34,36:39)
negkey
length(negkey)
NARC.df[negkey]
summary(NARC.df)
NARC.df
plot(NARC.df[1])
plot(as.factor(NARC.df[1]))
as.factor(NARC.df[1])
plot(as.factor(narc$Q1))
narc <- read.csv("~/Dropbox/!GRADSTATS/Datasets/Narcissism/data.csv", stringsAsFactors = T,
na.strings = 0)
head(narc)
names(narc)
NARC.df <- narc[,2:41]
plot(as.factor(narc$Q1))
NARC.df[negkey]
NARC.df[negkey]
2-NARC.df[negkey]
1-NARC.df[negkey]
3-NARC.df[negkey]
data.frame(NARC.df[!negkey], 3-NARC.df[negkey])
NARC.df[!negkey]
3-NARC.df[negkey]
NARC.df[!negkey]
NARC.df
!negkey
setdiff(NARC.df, NARC.df[negkey])
data.frame(setdiff(NARC.df, NARC.df[negkey]))
data.frame(data.frame(setdiff(NARC.df, NARC.df[negkey])), 3-NARC.df[negkey])
reNARC.df <- data.frame(data.frame(setdiff(NARC.df, NARC.df[negkey])), 3-NARC.df[negkey])
rowSums(reNARC.df, na.rm = T)
narc$NARCSCORE <- rowSums(reNARC.df, na.rm = T)/2
plot(narc$NARCSCORE, narc$score)
cbind(narc$NARCSCORE, narc$score)
rowSums(reNARC.df, na.rm = T)
narc$NARCSCORE <- 40-rowSums(reNARC.df, na.rm = T)
cbind(narc$NARCSCORE, narc$score)
rowSums(reNARC.df, na.rm = T)
narc$NARCSCORE <- rowSums(reNARC.df, na.rm = T)-40
cbind(narc$NARCSCORE, narc$score)
negkey <- c(1:3,6,8,11:14,16,21,24:25,27,29:31,33:34,36:39)
length(negkey)
reNARC.df <- data.frame(data.frame(setdiff(NARC.df, NARC.df[negkey])), 3-NARC.df[negkey])
narc$NARCSCORE <- rowSums(reNARC.df, na.rm = T)-40
cbind(narc$NARCSCORE, narc$score)
plot(narc$NARCSCORE, narc$score)
diff <- narc$NARCSCORE - narc$score
narc[diff != 0,]
cbind(narc[diff != 0,]$score,
narc[diff != 0,]$NARCSCORE)
plot(narc$gender)
plot(as.factor(narc$gender))
hist(narc$age)
hist(narc$age)
narc['Q1']
integer(narc['Q1'] == 1)
((int) $_POST['Q1'] == 1)
narc['Q1'] == 1
integer(narc['Q1'] == 1)
?integer
integer(1, narc['Q1'] == 1)
narc['Q1'] == 1
narc['Q1'] == 1
ifelse(narc['Q1'] == 1, 0, 1)
coin <- c(0,1)
coinflip <- c(0,1)
sample(coinflip, 1)
sample(coinflip, 1)
sample(coinflip, 1)
sample(coinflip, 1)
sample(coinflip, 1)
sample(coinflip, 1)
sample(coinflip, 1)
sample(coinflip, 1)
sample(coinflip, 1)
sample(coinflip, 1)
sample(coinflip, 1)
sample(coinflip, 1)
bucket <- array()
for(i in c(1:1000)){
bucket[i] <- sample(coinflip, 1)
}
hist(bucket)
rep(sample(coinflip, 1), 10)
coinflip <- c(0,1)
bucket <- array()
for(i in c(1:1000)){
thing <- NULL
thing <- sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
bucket[i] <- thing
}
```
coinflip <- c(0,1)
bucket <- array()
for(i in c(1:1000)){
bucket[i] <- sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
bucket[i] <- thing
}
hist(bucket)
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
bucket <- array()
for(i in c(1:1000)){
bucket[i] <- sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
bucket[i] <- thing
}
hist(bucket)
coinflip <- c(0,1)
bucket <- array()
for(i in c(1:1000)){
bucket[i] <- sum(sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1),
sample(coinflip, 1))
}
hist(bucket)
sample(coinflip, 1)
x <- 1:6 # possible outcomes (sides)
p <- rep(1,6)/6 # probability of each outcome
# roll our dice:
my.samples <- c()
for(i in 1:10000) {
s <- runif(10, min=7.3, max=11.8) #, replace=T, prob=p)
my.sum <- sum(s) # or mean
my.samples <- append(my.samples, my.sum)
}
hist(my.samples)
my.samples <- c()
for(i in 1:10000) {
s <- runif(10, min=7.3, max=11.8), replace=T, prob=p)
my.samples <- c()
for(i in 1:10000) {
s <- runif(10, min=7.3, max=11.8, replace=T, prob=p)
my.sum <- sum(s) # or mean
my.samples <- append(my.samples, my.sum)
}
my.samples <- c()
for(i in 1:10000) {
s <- runif(10, replace=T, prob=p)
my.sum <- sum(s) # or mean
my.samples <- append(my.samples, my.sum)
}
?runif
runif(20)
runif(20, p)
lapply(sample(coinflip,1), 10)
lapply(c(1:10), sample(coinflip,1))
?replicate
replicate(10, sample(coinflip,1))
sample(coinflip,1)
replicate(10, sample(coinflip,1))
replicate(10, sample(coinflip,1))
replicate(10, sample(coinflip,1))
sum(replicate(10, sample(coinflip,1)))
bucket <- array()
for(i in c(1:1000)){
bucket[i] <- sum(replicate(10, sample(coinflip,1)))
}
hist(bucket)
diceroll <- c(1:6) # defining a die
diceroll
diceroll <- c(1:6) # defining a die
sample(diceroll,1) #
replicate(10, sample(diceroll,1))
sum(replicate(10, sample(diceroll,1)))
big.bucket <- array()
for(i in c(1:1000)){
bucket[i] <- sum(replicate(10, sample(diceroll,1)))
}
hist(big.bucket)
diceroll <- c(1:6) # defining a die
sample(diceroll,1) #
replicate(10, sample(diceroll,1))
sum(replicate(10, sample(diceroll,1)))
big.bucket <- array()
for(i in c(1:1000)){
big.bucket[i] <- sum(replicate(10, sample(diceroll,1)))
}
hist(big.bucket)
diceroll <- c(1:6) # defining a die
sample(diceroll,1) #
replicate(10, sample(diceroll,1))
sum(replicate(10, sample(diceroll,1)))
big.bucket <- array()
for(i in c(1:1000)){
big.bucket[i] <- sum(replicate(10, sample(diceroll,1)))
}
hist(big.bucket)
diceroll <- c(1:6) # defining a die
sample(diceroll,1) #
replicate(10, sample(diceroll,1))
sum(replicate(10, sample(diceroll,1)))
big.bucket <- array()
for(i in c(1:10000)){
big.bucket[i] <- sum(replicate(10, sample(diceroll,1)))
}
hist(big.bucket)
?sample
p <- (.6,.4) # not 50/50
sample(coinflip,1, p)
unfair <- c(.6,.4) # not 50/50
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
sample(coinflip,1, prob = unfair)
replicate(10, sample(coinflip,1, prob = unfair))
bucketoflies <- array()
for(i in c(1:1000)){
bucketoflies[i] <- sum(replicate(10, sample(coinflip,1, prob = unfair)))
}
hist(bucketoflies)
bucketoflies <- array()
for(i in c(1:10000)){
bucketoflies[i] <- sum(replicate(10, sample(coinflip,1, prob = unfair)))
}
hist(bucketoflies)
sum(replicate(100, sample(coinflip,1, prob = unfair)))
bucketoflies <- array()
for(i in c(1:10000)){
bucketoflies[i] <- sum(replicate(100, sample(coinflip,1, prob = unfair)))
}
hist(bucketoflies)
coinflip <- c(0,1) # defining a coin-flip.
unfair <- c(.7,.3) # not 50/50
sample(coinflip,1, prob = unfair) #
sum(replicate(100, sample(coinflip,1, prob = unfair)))
bucketoflies <- array()
for(i in c(1:10000)){
bucketoflies[i] <- sum(replicate(10, sample(coinflip,1, prob = unfair)))
}
hist(bucketoflies)
coinflip <- c(0,1) # defining a coin-flip.
unfair <- c(.7,.3) # not 50/50
sample(coinflip,1, prob = unfair) #
sum(replicate(100, sample(coinflip,1, prob = unfair)))
bucketoflies <- array()
for(i in c(1:10000)){
bucketoflies[i] <- sum(replicate(10, sample(coinflip,1, prob = unfair)))
}
hist(bucketoflies)
N <- 50 # original sample size
p <- 1 # number of outliers in dataset
d <- NULL
for(i in c(1:1000)){
fake.dat <- rnorm(N, 100, 10)
fake.dat[sample(length(fake.dat), p)] <- rnorm(p, 250, 2)
d <- rbind(d, data.frame(mean = mean(fake.dat), median = median(fake.dat)))
}
hist(d$mean)
abline(v = 100, col = 'black', lwd = 5)
abline(v = mean(d$mean), col = 'red', lwd = 5)
hist(d$median)
abline(v = 100, col = 'black', lwd = 5)
abline(v = mean(d$median), col = 'red', lwd = 5)
par(mfrow = c(1,2))
hist(d$mean)
abline(v = 100, col = 'black', lwd = 5)
abline(v = mean(d$mean), col = 'red', lwd = 5)
hist(d$median)
abline(v = 100, col = 'black', lwd = 5)
abline(v = mean(d$median), col = 'red', lwd = 5)
par(mfrow = c(1,2))
hist(d$mean)
abline(v = 100, col = 'black', lwd = 5)
abline(v = mean(d$mean), col = 'red', lwd = 5)
hist(d$median)
abline(v = 100, col = 'black', lwd = 5)
abline(v = mean(d$median), col = 'red', lwd = 5)
d
