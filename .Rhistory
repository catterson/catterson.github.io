pace <- e[,11]
levels(pace)
levels(pace)
levels(pace) <- c("OkFast", "OkSlow", "Perfect", "TooSlow")
pace <- factor(pace, levels = c("TooSlow", "OkSlow", "Perfect", "OkFast"))
plot(pace)
pace <- e[,11]
levels(pace) <- c("OkFast", "OkSlow", "Perfect", "TooSlow", "TooFast")
pace <- factor(pace, levels = c("TooSlow", "OkSlow", "Perfect", "OkFast", "TooFast"))
plot(pace)
plot(pace, main = "Pace of Class")
names(e)
plot(e[,6])
hist(e[,6])
hist(e[,6], xlim = c(0,10))
hist(e[,6], xlim = c(0,10), breaks = 5)
hist(e[,6], xlim = c(0,10), breaks = 6)
hist(e[,6], xlim = c(0,10), breaks = 4)
hist(e[,6], xlim = c(0,10), breaks = 10)
hist(e[,6], xlim = c(0,10), breaks = 5)
plot(as.factor(e[,6]), xlim = c(0,10), breaks = 5)
plot(as.factor(e[,6]), xlim = c(0,10))
plot(as.factor(e[,6]))
class <- as.factor(e[,6])
levels(class)
levels(class)[6:10]
levels(class)[6:10] <- 1:5
levels(class)
class <- as.factor(e[,6])
levels(class)[6:11] <- 0:5
class <- factor(class, levels = c(0:10))
plot(class)
class <- as.factor(e[,6])
levels(class)[6:11] <- 0:5
class <- factor(class, levels = c(0:10))
plot(class, main = "How is Class Going?")
class <- as.factor(e[,6])
levels(class)[6:11] <- 0:5
class <- factor(class, levels = c(0:10))
plot(class, main = "How is Class Going?", xlab = "0 = The Worst; 10 = The Best")
plot(class, main = "How is Class Going?", xlab = "0 = The Worst               10 = The Best")
names(e)
plot(e[,6] ~ e[,9])
plot(jitter(e[,6]) ~ jitter(e[,9]))
amod <- lm(e[,6] ~ e[,9])
abline(amod)
plot(jitter(e[,6]) ~ jitter(e[,9]), xlab = "How is Grad School Going?", ylab = "How is the Class Going?")
amod <- lm(e[,6] ~ e[,9])
abline(amod)
summary(amod)
par(mfrow = c(2,2))
plot(amod)
names(e)
diff <- as.factor(e[,10])
diff
levels(diff)
levels(diff) <- c("OkEasy", "OkHard", "Perfect", "TooEasy", "TooHard")
diff <- as.factor(e[,10])
levels(diff) <- c("OkEasy", "OkHard", "Perfect", "TooEasy", "TooHard")
diff <- factor(diff, levels = c("TooEasy", "OkEasy", "Perfect", "OkHard", "TooHard"))
diff
plot(diff)
par(mfrow = c(2,2))
plot(diff, main = "Class Difficulty")
plot(pace, main = "Class Pace")
plot(class, main = "How is Class Going?", xlab = "0 = The Worst               10 = The Best")
head(e)
names(e)
hist(e[,4])
hist(e[,4], xlim = c(0,10))
par(mfrow = c(2,2))
plot(diff, main = "Class Difficulty")
plot(pace, main = "Class Pace")
plot(class, main = "How is Class Going?", xlab = "0 = The Worst               10 = The Best")
hist(e[,4], xlim = c(0,10), xlab = "0 = The Worst               10 = The Best", main = "How Exam Go?")
par(mfrow = c(2,2))
plot(class, main = "How is Class Going?", xlab = "0 = The Worst               10 = The Best")
hist(e[,4], xlim = c(0,10), xlab = "0 = The Worst               10 = The Best", main = "How Exam Go?")
plot(diff, main = "Class Difficulty")
plot(pace, main = "Class Pace")
names(e)
summary(lm(hunger ~ stress, m))
summary(lm(hunger ~ had.breakfast, m))
plot(mod1)
m <- read.csv("../Datasets/MiniGrad/mini_grad_data.csv", stringsAsFactors = T)
head(m)
mod1 <- lm(hunger ~ had.breakfast, data = m)
plot(mod1)
mod2 <- lm(stress ~ had.breakfast, data = m)
plot(mod2)
mod2 <- lm(stress ~ had.breakfast, data = m)
summary(mod2)
mod2 <- lm(social ~ had.breakfast, data = m)
summary(mod2)
mod2 <- lm(m$hrs.sleep ~ had.breakfast, data = m)
summary(mod2)
mod2 <- lm(tired ~ had.breakfast, data = m)
summary(mod2)
mod2 <- lm(stress ~ had.breakfast, data = m)
summary(mod2)
mod2 <- lm(organized ~ had.breakfast, data = m)
summary(mod2)
mod2 <- lm(open ~ had.breakfast, data = m)
summary(mod2)
mod2 <- lm(stress ~ had.breakfast, data = m)
summary(mod2)
mod1 <- lm(tired ~ had.breakfast, data = m)
plot(mod1)
m[m$had.breakfast == "Yes",]
brekY <- m[m$had.breakfast == "Yes",]
brekN <- m[m$had.breakfast == "No",]
brekY$hunger
mean(brekY$hunger)
mean(brekN$hunger)
mN <- mean(brekN$hunger)
(mY - mN)
mY <- mean(brekY$hunger)
mN <- mean(brekN$hunger)
(mY - mN)
sem <- function(sd(x) / (length(x)^.5))
?function
sem <- function(x){
sd(x) / (length(x)^.5)}
(mY - mN)/sem(m$had.breakfast)
sem(m$had.breakfast)
(mY - mN)/sem(m$hunger)
t.test(brekY$hunger, brekN$hunger)
t.test(brekY$hunger, brekN$hunger, paired = F)
t.test(brekY$hunger, brekN$hunger, var.equal = T)
t.test(brekY$hunger, brekN$hunger, var.equal = F)
describe(m$hunger)
library(psych)
describe(m$hunger)
sem(m$hunger)
mN
mY
(mY - mN)/sem(m$hunger)
summary(lm(hunger ~ had.breakfast, m))
t.test(brekY$hunger, brekN$hunger, var.equal = T)
t.test(brekY$hunger, brekN$hunger, var.equal = F)
mY-mN
sem(mY-mN)
cohen.d(m$hunger, m$had.breakfast)
mod4 <- lm(hunger ~ food.pref, data = m)
summary(mod4)
mod4 <- lm(stress ~ food.pref, data = m)
summary(mod4)
mod4 <- lm(hunger ~ food.pref, data = m)
summary(mod4)
t.test(brekY$hunger, brekN$hunger, var.equal = T)
mod1 <- lm(tired ~ had.breakfast, data = m)
plot(mod1)
mod1 <- lm(tired ~ had.breakfast, data = m)
summary(mod1)
bucket <- array()
for(i in c(1:1000)){
mx <- m[sample(1:nrow(m), nrow(m), replace = T), ]
modx <- lm(tired ~ had.breakfast, data = mx)
bucket[i] <- coef(modx)[2]
}
sd(bucket)
bucket <- array()
for(i in c(1:1000)){
mx <- m[sample(1:nrow(m), nrow(m), replace = T), ]
modx <- lm(tired ~ had.breakfast, data = mx)
bucket[i] <- coef(modx)[2]
}
sd(bucket)
bucket <- array()
for(i in c(1:1000)){
mx <- m[sample(1:nrow(m), nrow(m), replace = T), ]
modx <- lm(tired ~ had.breakfast, data = mx)
bucket[i] <- coef(modx)[2]
}
sd(bucket)
sd(m$hunger)
brekY <- m[m$had.breakfast == "Yes",]
brekN <- m[m$had.breakfast == "No",]
length(brekY)
nrow(brekY)
dfN <- nrow(brekN)-1
(var(brekY$hunger) + var(brekN$hunger))/(dfY + dfN)
dfY <- nrow(brekY)-1
dfN <- nrow(brekN)-1
poolvar <- (var(brekY$hunger) + var(brekN$hunger))/(dfY + dfN)
poolvar
sqrt(poolvar)
sqrt(poolvar)/sqrt(nrow(m))
?sem
sem
sem(m$hunger)
sqrt(poolvar)
sqrt(nrow(m))
sqrt(nrow(brekY))
sqrt(poolvar)/sqrt(nrow(brekY))
sem(m$hunger)
summary(mod1)
cbind(diffPower - 1.96*sd(powerbucket[,3]),
diffPower + 1.96*sd(powerbucket[,3]))
varY <- var(brekY$hunger)
varN <- var(brekN$hunger)
nY <- nrow(brekY)
nN <- nrow(brekN)
varpool <- (((nP - 1)*varP) + ((nW-1)*varW))/(nP + nW - 2)
varpool <- (((nY - 1)*varY) + ((nN-1)*varN))/(nY + nN - 2)
varpool^.5 # pooled sd.
(varpool^.5)/sqrt(nY + nN - 2)
sqrt((varpool/nY) + (varpool/nN))
m <- read.csv("../Datasets/MiniGrad/mini_grad_data.csv", stringsAsFactors = T)
m <- read.csv("~/Dropbox/!GRADSTATS/gradlab/Datasets/MiniGrad/mini_grad_data.csv", stringsAsFactors = T)
head(m)
mod1 <- lm(tired ~ had.breakfast, data = m)
summary(mod1)
mod <- lm(hungry ~ tired, data = m)
mod <- lm(m$hunger ~ tired, data = m)
summary(mod)
plot(m$hunger)
hist(m$hunger)
par(mfrow = c(1,2))
hist(m$hunger)
plot(m$had.breakfast)
par(mfrow = c(1,2))
hist(m$hunger)
plot(m$had.breakfast, xlab = "Had Breakfast")
mod <- lm(hunger ~ had.breakfast, data = m)
coef(mod)
dummy.code(m$hunger, m$had.breakfast)
dummy.coef(m$hunger, m$had.breakfast)
dummy.coef(m$had.breakfast)
dummy.coef(mod)
dummy.code(m$had.breakfast)
coef(mod)
dummy.code(m$had.breakfast)
m$had.breakfast
cbind(m$had.breakfast, dummy.code(m$had.breakfast))
data.frame(m$had.breakfast, dummy.code(m$had.breakfast))
head(data.frame(m$had.breakfast, dummy.code(m$had.breakfast)))
head(raw = data.frame(m$had.breakfast, dummy = dummy.code(m$had.breakfast)))
t <- data.frame(m$had.breakfast, dummy.code(m$had.breakfast))
colnames(t)
colnames(t) <- c("Raw Data", "Dummy Code = Yes", "Dummy Code = No")
t
head(t)
c <- read.csv("~/Downloads/CrowdstormingDataJuly1st.csv")
head(c)
nrow(c)
R <- rowMeans(c$rater1, c$rater2)
c$R <- rowMeans(data.frame(c$rater1, c$rater2))
glm(redCards ~ R, family = "binomial", data = c)
c$redCards
summary(c$redCards)
glm(redCards ~ R, family = "poisson", data = c)
mc <- glm(redCards ~ R, family = "poisson", data = c)
summary(mc)
hist(c$R)
hist(c$redCards)
mod <- lm(hunger ~ had.breakfast, data = m)
coef(mod)
{r}coef(mod)
coef(mod)
cohen.d(m$hunger, m$had.breakfast)
mean(brekY$hunger)
mean(brekN$hunger)
tapply(m$hunger, m$had.breakfast, mean)
dfY <- nrow(brekY)-1 # the sample size of breakfast eaters, minus 1
dfN <- nrow(brekN)-1
poolvar <- (var(brekY$hunger) + var(brekN$hunger))/(dfY + dfN)
poolvar^.5
poolsd <- poolvar^.5
coef(mod)[2]
diff <- coef(mod)[2] # the difference between groups
diff/poolsd
coef(mod)
poolsd
sd(m$hunger)
(var(brekY$hunger) + var(brekN$hunger))/(dfY + dfN)
poolvar <- (var(brekY$hunger) + var(brekN$hunger))/(dfY + dfN)
poolsd <- poolvar^.5
diff <- coef(mod)[2] # the difference between groups
diff/poolsd
varY <- var(brekY$hunger)
varN <- var(brekN$hunger)
poolvar <- ((dfY * varY) + (dfN * varN))/(dfY + dfN)
poolvar
poolsd <- poolvar^.5
diff <- coef(mod)[2] # the difference between groups
diff/poolsd
cohen.d(m$hunger, m$had.breakfast)
diff/sd(m$hunger)
cohen.d()
cohen.d
?cohen.d
cohen.d(hunger ~ had.breakfast, data = m)
diff/poolsd
title: "Lecture 6 - T-Test
contrasts(m$had.breakfast)
contrasts(m$had.breakfast)
m$had.breakfast
relevel(m$had.breakfast)
plot(m$had.breakfastR) # same data, different orientation
m$had.breakfastR <- relevel(m$had.breakfast, ref = "Yes")
plot(m$had.breakfastR) # same data, different orientation
plotmeans(hunger ~ had.breakfastR, data = m)
library(gplots)
plotmeans(hunger ~ had.breakfastR, data = m)
plot(hunger ~ had.breakfast)
plot(hunger ~ had.breakfast, data = m)
library(ggplot2)
library(ggthemes)
ggplot(m, aes(x=had.breakfast, y=hunger)) + # defining my space
stat_summary(fun=mean, geom="bar", fill="gray") + # adding a bar for the means
stat_summary(fun.data=mean_se, geom="errorbar", width=0.25) + # adding sampling error [more on this later!]
geom_dotplot(binaxis='y', binwidth=0.1,stackdir="center", alpha=0.5, stroke=0, dotsize=0.8) + # adding dots for the individual data; sorting them
coord_cartesian(ylim=c(1,10)) + # changing the limits of my y-axis.
xlab("Brekky") + ylab("Hunger") + # adding labels
theme_tufte() # adding a theme
m$had.breakfastR <- relevel(m$had.breakfast, ref = "Yes")
plot(m$had.breakfastR) # same data, different orientation
modR <- lm(hunger ~ had.breakfastR, data = m)
coef(modR)
plotmeans(hunger ~ had.breakfastR, data = m)
summary(mod)$r.squared
poolsd/sqrt(nrow(m))
summary(mod)
nrow(m)
poolsd/sqrt(nrow(24))
poolsd/sqrt(24)
poolsd
meandf <- (dfY + dfN)/2
poolsd/sqrt(meandf)
meandf
poolsd/sqrt(meandf-1)
poolsd
sd(m$hunger)
sd(m$hunger)/sqrt(24)
length(mod$model$hunger)
length(m$hunger)
mod$contrasts
?lm
t.test(brekY$hunger, brekN$hunger)
t.test(brekY$hunger, brekN$hunger, var.equal = F)
t.test(brekY$hunger, brekN$hunger, var.equal = T)
sqrt((varpool/nY) + (varpool/nN))
(varpool^.5)/sqrt(nY + nN - 2)
cohen.d(m$hunger, m$had.breakfast)
summary(mod)
(varpool^.5)/sqrt(nY + nN - 2)
summary(mod)
sqrt((poolvar/nY) + (poolvar/nN))
par(mfrow = c(2,2))
plot(class, main = "How is Class Going?", xlab = "0 = The Worst               10 = The Best")
hist(e[,4], xlim = c(0,10), xlab = "0 = The Worst               10 = The Best", main = "How Exam Go?")
plot(diff, main = "Class Difficulty")
plot(pace, main = "Class Pace")
## GRAD STATS POST MINI EXAM.
e <- read.csv("~/Downloads/6.1_PostMiniExam.csv", stringsAsFactors = T)
head(e)
names(e)
pace <- e[,11]
levels(pace) <- c("OkFast", "OkSlow", "Perfect", "TooSlow", "TooFast")
pace <- factor(pace, levels = c("TooSlow", "OkSlow", "Perfect", "OkFast", "TooFast"))
plot(pace, main = "Pace of Class")
class <- as.factor(e[,6])
levels(class)[6:11] <- 0:5
class <- factor(class, levels = c(0:10))
plot(class, main = "How is Class Going?", xlab = "0 = The Worst               10 = The Best")
diff <- as.factor(e[,10])
levels(diff) <- c("OkEasy", "OkHard", "Perfect", "TooEasy", "TooHard")
diff <- factor(diff, levels = c("TooEasy", "OkEasy", "Perfect", "OkHard", "TooHard"))
plot(diff, main = "Class Difficulty")
## ALL DA GRAPHS
par(mfrow = c(2,2))
plot(class, main = "How is Class Going?", xlab = "0 = The Worst               10 = The Best")
hist(e[,4], xlim = c(0,10), xlab = "0 = The Worst               10 = The Best", main = "How Exam Go?")
plot(diff, main = "Class Difficulty")
plot(pace, main = "Class Pace")
plot(jitter(e[,6]) ~ jitter(e[,9]), xlab = "How is Grad School Going?", ylab = "How is the Class Going?")
amod <- lm(e[,6] ~ e[,9])
abline(amod)
summary(amod)
par(mfrow = c(2,2))
plot(amod)
install.packages("car")
lm(income ~ education, data = presto)
lm(income ~ education, data = presto)
plot(presto$prestige)
cor(presto$prestige, presto$education)
cor(presto$prestige, presto$education)
cor(presto$prestige, presto$education) # the correlation
# install.packages("car") # this installs a package - you only need to do this ONCE. Remove the # to run this code.
library(car) # loading the library - make sure you installed it first!
presto <- Prestige # creating a copy of the dataset so you don't mess something up :)
names(presto) # tadaa!!
plot(presto$prestige)
abline(h = mean(presto$prestige), lwd = 5, col = 'red',
xlab = "Index (Individual Row Number)",
ylab = "Individual Prestige Score")
residual <- presto$prestige - mean(presto$prestige)
sum(residual^2)
par(mfrow = c(1,2)) # splits my graphing window
hist(presto$prestige, col = 'black', bor = 'white', main = "")
hist(presto$education, col = 'black', bor = 'white', main = "")
plot(prestige ~ education, data = presto)
mod <- lm(prestige ~ education, data = presto) # this defines the model, and then saves it to an object (called mod)
coef(mod) # this shows me the values of the model
plot(prestige ~ education, data = presto, # plots the model again
xlim = c(0, 16),  # changes my x-axis to range from 0 to 16
ylim = c(-20,90)) # changes my y-axis to range from -15 to 90
abline(mod, col = 'red', lwd = 5) # this adds the line to my graph.
#| echo: false
lm(income ~ education, data = presto)
par(mfrow = c(1,2))
plot(presto$prestige)
abline(h = mean(presto$prestige), lwd = 5, col = 'red')
plot(prestige ~ education, data = presto, # plots the model again
xlim = c(0, 16),  # changes my x-axis to range from 0 to 16
ylim = c(-20,90)) # changes my y-axis to range from -15 to 90
abline(mod, col = 'red', lwd = 5) # this adds the line to my graph.
head(mod$residuals) # these are the residuals (the errors from our model)
head(mod$residuals^2) # these are the squared residuals
sum(mod$residuals^2) # these are the sum of the squared residuals when using the model to make predictions
SSM <- sum(mod$residuals^2) # saving the sum of the squared errors from the model
SST <- sum(residual^2) # saving the sum of the squared errors from the mean
SST - SSM # the difference in the squared errors from the mean vs. the model
(SST - SSM)/SST
plot(prestige ~ education, data = presto,
ylab = "Prestige (Raw Units)",
xlab = "Education (Years)")
mod <- lm(prestige ~ education, data = presto)
abline(mod, lwd = 5, col = 'red')
round(coef(mod), 2)
plot(scale(prestige) ~ scale(education), data = presto,
ylab = "Prestige (Units of Standard Deviation)",
xlab = "Education (Units of Standard Deviation)")
zmod <- lm(scale(prestige) ~ scale(education), data = presto)
abline(zmod, lwd = 5, col = 'red')
round(coef(zmod), 2)
cor(presto$prestige, presto$education) # the correlation
coef(zmod)[2] # the slope of our z-scored model
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv", stringsAsFactors = T)
plot(d$fb.friends)
plot(d$insta.follows)
plot(d$insta.followers)
plot(d$insta.followers)
plot(d$insta.follows)
plot(d$insta.follows, main = "Mean as a Model",
xlab = "Index (Row in Dataset)",
ylab = "# Of Accounts a Person Follows")
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv", stringsAsFactors = T)
plot(d$insta.follows, main = "Mean as a Model (Red Line)",
xlab = "Index (Row in Dataset)",
ylab = "# Of Accounts a Person Follows")
abline(h = mean(d$insta.follows, na.rm = T), lwd = 5)
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv", stringsAsFactors = T)
plot(d$insta.follows, main = "Mean as a Model (Red Line)",
xlab = "Index (Row in Dataset)",
ylab = "# Of Accounts a Person Follows")
abline(h = mean(d$insta.follows, na.rm = T), lwd = 5, col = 'red')
residual <- d$insta.follows - mean(d$insta.follows, na.rm = T)
residual <- d$insta.follows - mean(d$insta.follows, na.rm = T)
SST <- sum(residual^2)
SST
SST <- sum(residual^2, na.rm = T)
SST
sqrt(SST/length(residual))
sd(d$insta.follows, na.rm = T)
sqrt(SST/length(residual)-1)
SST/length(residual)
sqrt(SST/length(residual))
sqrt(SST/(length(residual)-1))
residual
n <- length(na.omit(d$insta.follows))
sqrt(SST/n)
sd(d$insta.follows, na.rm = T)
sqrt(SST/n-1)
sqrt(SST/n) # the equation for the standard deviation
sd(d$insta.follows, na.rm = T) # the function
sqrt(SST/(n-1))
brekY <- m[m$had.breakfast == "Yes",]
brekN <- m[m$had.breakfast == "No",]
dfY <- nrow(brekY)-1
dfN <- nrow(brekN)-1
poolvar <- (var(brekY$hunger) + var(brekN$hunger))/(dfY + dfN)
sqrt(poolvar)/sqrt(nrow(brekY))
varY <- var(brekY$hunger)
varN <- var(brekN$hunger)
nY <- nrow(brekY)
nN <- nrow(brekN)
varpool <- (((nY - 1)*varY) + ((nN-1)*varN))/(nY + nN - 2)
varpool^.5 # pooled sd.
(varpool^.5)/sqrt(nY + nN - 2)
sqrt((varpool/nY) + (varpool/nN))
summary(mod1)
sqrt((varpool/nY) + (varpool/nN))
sqrt((varpool/nY-1) + (varpool/nN-1))
sqrt((varpool/(nY-1)) + (varpool/(nN-1)))
sqrt((varpool/(nY-1)) + (varpool/(nN-1)))
varpool <- (((nY - 1)*varY) + ((nN-1)*varN))/(nY + nN - 2)
varpool^.5 # pooled sd.
(varpool^.5)/sqrt(nY + nN - 2)
sqrt((varpool/nY) + (varpool/nN))
varY <- var(brekY$hunger)
varN <- var(brekN$hunger)
nY <- nrow(brekY)
nN <- nrow(brekN)
varpool <- (((nY - 1)*varY) + ((nN-1)*varN))/(nY + nN - 2)
varpool^.5 # pooled sd.
(varpool^.5)/sqrt(nY + nN - 2)
sqrt((varpool/nY) + (varpool/nN))
summary(mod1)
mod1 <- lm(hunger ~ had.breakfast, data = m)
summary(mod1)
