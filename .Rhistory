hist(d$insta.followers)
## Q2. Graph the variable hrs.sleep, (hours of sleep students said they got.)
## What is the shape of this distribution?
hist(d$insta.follows)
## Q2. Graph the variable insta.follows (the number of accounts people )
## What is the shape of this distribution?
hist(d$fb.friends)
## Q3. What is the average of this variable?
## (Round to two decimal places for the check-in)
describe(d$insta.follows)
library(psych)
## Q3. What is the average of this variable?
## (Round to two decimal places for the check-in)
describe(d$insta.follows)
## Q3. What is the average of this variable?
## (Round to two decimal places for the check-in)
describe(d$height)
## Q2. Graph the variable insta.follows (the number of accounts people follow on instagram)
## What is the shape of this distribution?
hist(d$height)
## Q2. Graph the variable insta.follows (the number of accounts people follow on instagram)
## What is the shape of this distribution?
hist(d$shoe.size)
hist(d$thirsty)
sd(d$thirsty)
mean(d$thirsty)
## Q7. What is the average height in the class?
hist(d$hrs.sleep)
## Q7. What is the average height in the class?
hist(d$hrs.sleep)
## Q7. What is the average height in the class?
hist(d$hrs.sleep[d$hrs.sleep < 12])
## Q7. What is the average height in the class?
mean(d$hrs.sleep[d$hrs.sleep < 12], na.rm = T)
## Q7. What is the average height in the class?
mean(d$hrs.sleep, na.rm = T)
d <- read.csv("~/Dropbox/!WHY STATS/Professor Datasets/Personality and Random Numbers/personality_random_number_data.csv", stringsAsFactors = T) # change your path here!
nrow(d)
names(d)
summary(d)
head(d)
nrow(d)
head(summary(d))
summary(d)[20:25]
summary(d)[,20:25]
summary(d)[,22:42] # the variables now have
describe(d)
library(psych)
describe(d)
d <- read.csv("~/Dropbox/!GRADSTATS/Datasets/CLASS DATASETS - 102 - FA25/Onboarding Data/honor_onboard_FA25.csv",
stringsAsFactors = T)
plot(d$can.forloop)
summary(d$can.forloop) # finding the values for each group.
plot(d$can.forloop)
r <- read.csv("~/Downloads/Intra-State-Wars-v5/INTRA-STATE WARS v5.1 CSV.csv")
d <- read.csv("~/Dropbox/!WHY STATS/Chapter Datasets/Intra-State-Wars/INTRA-STATE WARS v5.1 CSV.csv",
stringsAsFactors = T)
head(d)
d <- read.csv("~/Dropbox/!WHY STATS/Chapter Datasets/Intra-State-Wars/INTRA-STATE WARS v5.1 CSV.csv",
stringsAsFactors = T)
head(d)
nrow(d)
## FOCUS ON THE VARIABLE : TotalBDeaths
hist(d$TotalBDeaths)
summary(d$TotalBDeaths)
d$TotalBDeaths[d$TotalBDeaths < 0]
d$TotalBDeaths[d$TotalBDeaths < 0]
length(d$TotalBDeaths[d$TotalBDeaths < 0])
d$TotalBDeaths[d$TotalBDeaths < 0] <- NA
d$TotalBDeaths[d$TotalBDeaths < 0] <- NA
summary(d$TotalBDeaths
)
plot(d$TotalBDeaths)
abline(h = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(h = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
plot(d$TotalBDeaths, main = "Zoomed in", ylim = c(0,400000))
plot(d$TotalBDeaths, main = "Zoomed in", ylim = c(0,200000))
abline(h = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(h = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
plot(d$TotalBDeaths)
abline(h = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(h = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
plot(d$TotalBDeaths, main = "Zoomed in", ylim = c(0,200000))
abline(h = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(h = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
## Q. What is the standard deviation of the variable?
sd(d$TotalBDeaths, na.rm = T)
m <- mean(d$TotalBDeaths, na.rm = T)
s <- sd(d$TotalBDeaths, na.rm = T) # 90890.58
m
s
abline(h = m + s, lwd = 3, col = 'red', lty = 'dashed')
abline(h = m - s, lwd = 3, col = 'red', lty = 'dashed')
plot(d$TotalBDeaths, main = "Zoomed in", ylim = c(0,200000))
abline(h = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(h = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
abline(h = m + s, lwd = 3, col = 'red', lty = 'dashed')
abline(h = m - s, lwd = 3, col = 'red', lty = 'dashed')
m+s
m-s
## Q. What is the maximum value of the variable?
max(d$TotalBDeaths)
## Q. What is the maximum value of the variable?
max(d$TotalBDeaths, na.rm = T)
(1200000 - m)
(1200000 - m)/s
(600000 - m)/s
hist(d$TotalBDeaths)
log(d$TotalBDeaths)
hist(log(d$TotalBDeaths))
d$TotalBDeaths
## Q. Should you remove these data??
hist(d$TotalBDeaths)
(400000 - m)/s
d$TotalBDeaths[d$TotalBDeaths > 400000]
d
d[d$TotalBDeaths > 400000, ]
d[d$TotalBDeaths > 400000, d$WarName] # finding the type of war
d$WarName
d[d$TotalBDeaths > 400000, ] # finding the type of war
d[d$TotalBDeaths > 400000, 2] # finding the type of war
d$TotalBDeaths[d$TotalBDeaths > 400000]
d$TotalBDeaths[d$TotalBDeaths > 400000] <- NA
hist(d$TotalBDeaths)
hist(d$TotalBDeaths, breaks = 30)
hist(d$TotalBDeaths, breaks = 30)
abline(v = mean(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'red')
abline(v = median(d$TotalBDeaths, na.rm = T), lwd = 5, col = 'blue')
m <- mean(d$TotalBDeaths, na.rm = T)
s <- sd(d$TotalBDeaths, na.rm = T) # 90890.58
abline(v = m + s, lwd = 3, col = 'red', lty = 'dashed')
abline(v = m - s, lwd = 3, col = 'red', lty = 'dashed')
m
s
hist(log(d$TotalBDeaths))
m <- mean(log(d$TotalBDeaths), na.rm = T)
s <- sd(log(d$TotalBDeaths), na.rm = T) # 90890.58
m
s
abline(v = m, lwd = 3, col = 'red')
abline(v = m + s, lwd = 3, col = 'red', lty = 'dashed')
abline(v = m - s, lwd = 3, col = 'red', lty = 'dashed')
d <- read.csv("~/Dropbox/!GRADSTATS/Datasets/CLASS DATASETS - 102 - FA25/Onboarding Data/honor_onboard_FA25.csv", stringsAsFactors = T)
View(d)
head(d)
plot(d)
plot(d)
plot(d)
summary(d)
summary(d$can.forloop)
# asking R to find the # of yeses
length(d$can.forloop[d$can.forloop == "yes"])
d$can.forloop[d$can.forloop == "yes"]
length(d$can.forloop[d$can.forloop == "Yes"]) # says Zero because it's Yes not yes
d$can.forloop == "Yes"
sum(d$can.forloop == "Yes")
d$can.forloop == "Yes"
summary(d$can.forloop)
summary(d$can.forloop)[4]
summary(d$can.forloop)
# asking R to find the other groups.
sum(!d$can.forloop == "Yes") # adds up all the True values.
# finding the difference.
sum(d$can.forloop == "Yes") - sum(!d$can.forloop == "Yes")
notYes <- sum(!d$can.forloop == "Yes")
Yes <- sum(d$can.forloop == "Yes")
Yes - notYes
fakey <- rnorm(10000000, mean = 100, sd = 30)
hist(fakey)
abline(v = mean(fakey), lwd = 5)
mean(fakey)
truthbucket <- array()
for(i in c(1:1000)){
lilfakey <- fakey[sample(1:length(fakey), 10)] # ten random individuals from fakey.
truthbucket[i] <- mean(lilfakey)
}
hist(truthbucket)
abline(v = mean(truthbucket), lwd = 5, col = 'red')
mean(truthbucket) # the mean
sd(truthbucket) # the standard deviation
truthbucket100 <- array()
for(i in c(1:1000)){
lilfakey <- fakey[sample(1:length(fakey), 100)] # 100 random individuals from fakey.
truthbucket100[i] <- mean(lilfakey)
}
hist(truthbucket100)
abline(v = mean(truthbucket100), lwd = 5, col = 'red')
mean(truthbucket100) # the mean
sd(truthbucket100) # the standard deviation
megatruthbucket <- array()
for(i in c(1:10000)){
lilfakey <- fakey[sample(1:length(fakey), 10)] # ten random individuals from fakey.
megatruthbucket[i] <- mean(lilfakey)
}
hist(megatruthbucket)
abline(v = mean(megatruthbucket), lwd = 5, col = 'red')
mean(megatruthbucket) # the mean
sd(megatruthbucket) # the standard deviation
d <- read.csv("../datasets/Onboarding Data/honor_onboard_FA25.csv", stringsAsFactors = T, na.strings = "")
par(mfrow = c(1,2))
hist(d$self.skills, breaks = c(0:5),
col = 'black', bor = 'white', main = "Computer Skills\n(Self-Perceptions)")
d <- read.csv("../datasets/Onboarding Data/honor_onboard_FA25.csv", stringsAsFactors = T, na.strings = "")
par(mfrow = c(1,2))
hist(d$self.skills, breaks = c(0:5),
col = 'black', bor = 'white', main = "Computer Skills\n(Self-Perceptions)")
hist(d$class.skills, breaks = c(0:5),
col = 'black', bor = 'white', main = "Computer Skills\n(Perceptions of Classmates)")
d[sample(1:nrow(d), nrow(d), replace = T), ] # same code, all as one line.
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
newclass$self.skills
mean(newclass$self.skills)
mean(d$self.skills)
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
mean(newclass$self.skills)
allmyclassesaregreat <- array()
allmyclassesaregreat <- array()
for(i in c(1:1000)){
newclass <- d[sample(1:nrow(d), nrow(d), replace = T), ]
allmyclassesaregreat[i] <- mean(newclass$self.skills)
}
hist(allmyclassesaregreat)
hist(d$self.skills, breaks = c(0:5),
col = 'black', bor = 'white', main = "Computer Skills\n(Self-Perceptions)")
SST <- sum((d$self.skills - mean(d$self.skills))^2) # defining the total error
SST
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/101 - Class Datasets - FA25/mini_cal_data.csv", stringsAsFactors = T)
nrow(d)
nrow(d)
head(d)
hist(d$insta.followers)
hist(d$insta.follows)
## Q4. What is the average of this variable?
## (Round to two decimal places for the check-in)
mean(d$insta.follows)
## Q4. What is the average of this variable?
## (Round to two decimal places for the check-in)
mean(d$insta.follows, na.rm = T)
### POP QUIZ : where would the median have to be? (and why??)
## below the mean / same as mean / above the mean
median(d$insta.follows, na.rm = T)
## Q6. What is the standard deviation of hrs.sleep?
sd(d$insta.follows, na.rm = T)
hist(d$insta.followers)
## Q7. What does this number mean / who cares about this value?
#### how much the average person differs from the average of the distribution!
#### the difference is in EITHER DIRECTION.
## BONUS QUESTION : how would you "see" the SD on the graph????
m <- mean(d$insta.follows, na.rm = T) # the mean.
s <- sd(d$insta.follows, na.rm = T) # the sd
hist(d$insta.follows)
abline(v = m, lwd = 5)
abline(v = m, lwd = 5, col = 'gray')
abline(v = m, lwd = 5, col = 'darkgray')
abline(v = m, lwd = 5, col = 'black')
abline(v = s, lty = "dashed")
hist(d$insta.follows)
abline(v = m, lwd = 5, col = 'black')
abline(v = m + s, lty = "dashed")
abline(v = m - s, lty = "dashed")
mean(d$hrs.sleep)
mean(d$hrs.sleep, na.rm = T)
## Q8. What is the average hours of sleep (hrs.sleep) for students in the class?
hist(d$hrs.sleep)
summary(d$hrs.sleep)
sd(d$hrs.sleep, na.rm = T)
d$hrs.sleep[d$hrs.sleep > 10]
d$hrs.sleep[d$engage < 3]
d$hrs.sleep[d$engage > 3]
d$hrs.sleep[d$tuhobura == "rat"]
d$tuhobura
d$hrs.sleep[d$tuhobura == "rats"]
## MOVING ON...
d$hrs.sleep[d$hrs.sleep > 10]
d$hrs.sleep[d$hrs.sleep > 10] <- NA
hist(d$hrs.sleep)
d <- read.csv("~/Dropbox/!WHY STATS/Chapter Datasets/Personality and Random Numbers/personality_random_number_data.csv",
stringsAsFactors = T)
names(d)
## Q1. How many individuals are in this dataset?
nrow(d)
## Q2. How many variables are in this dataset?
ncol(d)
head(d)
## Q3. The variable E1 is individual responses to the question "I am the life of the party" - a measure of Extraversion.
hist(d$E1)
d <- read.csv("~/Dropbox/!WHY STATS/Chapter Datasets/Personality and Random Numbers/personality_random_number_data.csv",
stringsAsFactors = T)
## Q1. How many individuals are in this dataset?
nrow(d)
## Q2. How many variables are in this dataset?
ncol(d)
hist(d$E1)
mean(d$E1)
summary(d)
d$E1[d$E1 = 0]
d$E1[d$E1 == 0]
d$E1[d$E1 < 1]
d$E1[d$E1 < 1] <- NA
d$E2[d$E2 < 1] <- NA
d[d < 1]
d[d == 0]
d[d == 0] <- NA
hist(d$E5)
summary(d)
mean(d$E11)
mean(d)
d[d == 1]
names(d)
d[d == 1, 22:31]
names(d)
extra.df <- d[,22:31] # using the codebook to index the 10 extraversion items
head(extra.df) # checking to make sure I did this correctly
alpha(extra.df) # r is warning me that some are negatively keyed...
library(psych)
names(d)
d[,22:31]
extra.df <- d[,22:31] # using the codebook to index the 10 extraversion items
head(extra.df) # checking to make sure I did this correctly
alpha(extra.df)
alpha(extra.df, check.keys = T) # seeing that some are negatively keyed...
## look at the codebook and confirm these are negatively keyed
extraPOS <- extra.df[,c(1,3,5,7,9)] # defining the positively keyed items
extraNEG <- extra.df[,c(2,4,6,8,10)] # defining the negatively keyed items
extraNEG <- extra.df[,c(2,4,6,8,10)] # defining the negatively keyed items
extraNEG
6-extraNEG
extraNEG <- 6-extraNEG # reverse scoring my negatively keyed items
extraCLEAN <- cbind(extraPOS, extraNEG)
head(extraCLEAN)
alpha(extraCLEAN) # high alpha; hooray.
d$EXTRA <- rowMeans(extraCLEAN,   # 10 items into one variable.
na.rm = TRUE) # still calculate if there’s missing data
hist(d$EXTRA)                     # What do you learn / observe?
names(d)
library(psych)
names(d)
open.df <- d[,61:71] # using the codebook to index the 10 openversion items
head(open.df) # checking to make sure I did this correctly
alpha(open.df) # r is warning me that some are negatively keyed...
alpha(open.df, check.keys = T) # seeing that some are negatively keyed...
## look at the codebook and confirm these are negatively keyed
openPOS <- open.df[,c(1,3,5,7,9)] # defining the positively keyed items
openNEG <- open.df[,c(2,4,6,8,10)] # defining the negatively keyed items
openNEG <- 6-openNEG # reverse scoring my negatively keyed items
openCLEAN <- cbind(openPOS, openNEG)
head(openCLEAN)
alpha(openCLEAN) # high alpha; hooray.
alpha(openCLEAN) # high alpha; hooray.
openPOS <- open.df[,c(1,3,5,7,9, 10)] # defining the positively keyed items
openNEG <- open.df[,c(2,4,6,8)] # defining the negatively keyed items
openNEG <- 6-openNEG # reverse scoring my negatively keyed items
openCLEAN <- cbind(openPOS, openNEG)
head(openCLEAN)
alpha(openCLEAN) # high alpha; hooray.
open.df
open.df <- d[,62:71] # using the codebook to index the 10 openversion items
head(open.df) # checking to make sure I did this correctly
open.df <- d[,62:71] # using the codebook to index the 10 openversion items
head(open.df) # checking to make sure I did this correctly
alpha(open.df) # r is warning me that some are negatively keyed...
alpha(open.df, check.keys = T) # seeing that some are negatively keyed...
## look at the codebook and confirm these are negatively keyed
openPOS <- open.df[,c(1,3,5,7,9,10)] # defining the positively keyed items
openNEG <- open.df[,c(2,4,6,8)] # defining the negatively keyed items
openNEG <- 6-openNEG # reverse scoring my negatively keyed items
openCLEAN <- cbind(openPOS, openNEG)
head(openCLEAN)
alpha(openCLEAN) # high alpha; hooray.
openPOS <- open.df[,c(1,3,5,7,9)] # defining the positively keyed items
openNEG <- open.df[,c(2,4,6,8,10)] # defining the negatively keyed items
openNEG <- 6-openNEG # reverse scoring my negatively keyed items
openCLEAN <- cbind(openPOS, openNEG)
head(openCLEAN)
alpha(openCLEAN) # high alpha; hooray.
openPOS <- open.df[,c(1,3,5,7,9, 10)] # defining the positively keyed items
openNEG <- open.df[,c(2,4,6,8)] # defining the negatively keyed items
openNEG <- 6-openNEG # reverse scoring my negatively keyed items
openCLEAN <- cbind(openPOS, openNEG)
head(openCLEAN)
alpha(openCLEAN) # high alpha; hooray.
d$OPEN <- rowMeans(openCLEAN,   # 10 items into one variable.
na.rm = TRUE) # still calculate if there’s missing data
hist(d$OPEN)
## Adapt this Code to Define Another Personality Scale (BORD Activity).
# STEP 1: ORGANIZING THE ITEMS AND CHECKING THE ALPHA RELIABILITY
names(d)
neg.df <- d[,32:41]
head(neg.df) # checking to make sure I did this correctly
alpha(neg.df) # r is warning me that some are negatively keyed...
negPOS <- neg.df[,c(1,3,5,7,9,6,8,10)] # defining the positively keyed items
negNEG <- neg.df[,c(2,4)] # defining the negatively keyed items
negNEG <- 6-negNEG # reverse scoring my negatively keyed items
negCLEAN <- cbind(negPOS, negNEG)
head(negCLEAN)
alpha(negCLEAN) # high alpha; hooray.
d$NEG <- rowMeans(negCLEAN,   # 10 items into one variable.
na.rm = TRUE) # still calculate if there’s missing data
hist(d$NEG)
### loading datasets and libraries
install.packages("psych") # only ONE time!!!!
library(psych)
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/214 - Class Datasets - FA25/Mini Dataset/mini_dvc_data.csv")
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/214 - Class Datasets - FA25/Mini Dataset/mini_dvc_data.csv", stringsAsFactors = T)
head(d)
### removing outliers from a variable.
hist(hrs.sleep)
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/214 - Class Datasets - FA25/Mini Dataset/mini_dvc_data.csv", stringsAsFactors = T)
### removing outliers from a variable.
hist(hrs.sleep)
### removing outliers from a variable.
hist(d$hrs.sleep)
### removing outliers from a variable.
hist(d$hrs.sleep, breaks = 15)
hist(d$hrs.sleep, breaks = 15, col = "lavender")
mean(d$hrs.sleep)
sd(d$hrs.sleep)
abline(v = mean(d$hrs.sleep), lwd = 5)
sd(d$hrs.sleep)
abline(v = mean(d$hrs.sleep) + sd(d$hrs.sleep), lwd = 5, lty = "dashed")
abline(v = mean(d$hrs.sleep) - sd(d$hrs.sleep), lwd = 5, lty = "dashed")
names(d)
plot(hrs.sleep ~ tired, data = d)
d$hrs.sleep[d$hrs.sleep < 24]
d$hrs.sleep[d$hrs.sleep > 20]
d$hrs.sleep[d$hrs.sleep > 20] <- NA
mean(d$hrs.sleep)
sd(d$hrs.sleep)
abline(v = mean(d$hrs.sleep), lwd = 5)
abline(v = mean(d$hrs.sleep) + sd(d$hrs.sleep), lwd = 5, lty = "dashed")
abline(v = mean(d$hrs.sleep) - sd(d$hrs.sleep), lwd = 5, lty = "dashed")
names(d)
## LINEAR MODEL PREVIEW.
plot(hrs.sleep ~ tired, data = d)
mod <- lm(hrs.sleep ~ tired, data = d)
mod <- lm(hrs.sleep ~ tired, data = d)
abline(mod, lwd = 5, col = 'red')
plot(hrs.sleep ~ bored, data = d)
mod <- lm(hrs.sleep ~ bored, data = d)
abline(mod, lwd = 5, col = 'red')
plot(tired ~ bored, data = d)
mod <- lm(tired ~ bored, data = d)
abline(mod, lwd = 5, col = 'red')
d$hrs.sleep[d$hrs.sleep > 20]
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/214 - Class Datasets - FA25/Mini Dataset/mini_dvc_data.csv", stringsAsFactors = T)
head(d)
### removing outliers from a variable.
hist(d$hrs.sleep, breaks = 15, col = "lavender")
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/214 - Class Datasets - FA25/Mini Dataset/mini_dvc_data.csv", stringsAsFactors = T)
head(d)
### graphing a variable.
hist(d$hrs.sleep, breaks = 15, col = "lavender")
mean(d$hrs.sleep)
sd(d$hrs.sleep)
abline(v = mean(d$hrs.sleep), lwd = 5)
abline(v = mean(d$hrs.sleep) + sd(d$hrs.sleep), lwd = 5, lty = "dashed")
abline(v = mean(d$hrs.sleep) - sd(d$hrs.sleep), lwd = 5, lty = "dashed")
d$hrs.sleep[d$hrs.sleep > 20]
##  d$hrs.sleep = in the dataset d look for the variable hrs.sleep
##  [d$hrs.sleep > 20] = indexing = asking R to point to values where d$hrs.sleep is greater than 20
d$hrs.sleep[d$hrs.sleep > 20] <- NA
## <- NA # assign NA to this value.
hist(d$hrs.sleep, breaks = 15, col = "lavender")
abline(v = mean(d$hrs.sleep, na.rm = T), lwd = 5)
abline(v = mean(d$hrs.sleep, na.rm = T) + sd(d$hrs.sleep, na.rm = T), lwd = 5, lty = "dashed")
abline(v = mean(d$hrs.sleep, na.rm = T) - sd(d$hrs.sleep, na.rm = T), lwd = 5, lty = "dashed")
m <- mean(d$hrs.sleep, na.rm = T)
s <- sd(d$hrs.sleep, na.rm = T)
m
## making this code ^^ look less junky!!!
mean(d$hrs.sleep)
selfes <- read.csv("~/Dropbox/!GRADSTATS/Datasets/Self-Esteem Dataset/data.csv",
stringsAsFactors = T,
na.strings = "0", sep = "\t")
## Q. What is the standard deviation of the variable age?
sd(d$age) # 15.02
d <- read.csv("~/Dropbox/!WHY STATS/Chapter Datasets/narcissism_data.csv", stringsAsFactors = T)
names(d)
library(psych)
## Q. How many individuals are in the dataset?
nrow(d) # 11243
## DO NOT REMOVE OUTLIERS YET!
## Q. What is the mean of the variable age.
describe(d$age)
mean(d$age) # 34.01
## Q. What is the median of the variable age?
median(d$age)
## Q. What is the standard deviation of the variable age?
sd(d$age) # 15.02
