summary(mod)
nrow(m)
poolsd/sqrt(nrow(24))
poolsd/sqrt(24)
poolsd
meandf <- (dfY + dfN)/2
poolsd/sqrt(meandf)
meandf
poolsd/sqrt(meandf-1)
poolsd
sd(m$hunger)
sd(m$hunger)/sqrt(24)
length(mod$model$hunger)
length(m$hunger)
mod$contrasts
?lm
t.test(brekY$hunger, brekN$hunger)
t.test(brekY$hunger, brekN$hunger, var.equal = F)
t.test(brekY$hunger, brekN$hunger, var.equal = T)
sqrt((varpool/nY) + (varpool/nN))
(varpool^.5)/sqrt(nY + nN - 2)
cohen.d(m$hunger, m$had.breakfast)
summary(mod)
(varpool^.5)/sqrt(nY + nN - 2)
summary(mod)
sqrt((poolvar/nY) + (poolvar/nN))
par(mfrow = c(2,2))
plot(class, main = "How is Class Going?", xlab = "0 = The Worst               10 = The Best")
hist(e[,4], xlim = c(0,10), xlab = "0 = The Worst               10 = The Best", main = "How Exam Go?")
plot(diff, main = "Class Difficulty")
plot(pace, main = "Class Pace")
## GRAD STATS POST MINI EXAM.
e <- read.csv("~/Downloads/6.1_PostMiniExam.csv", stringsAsFactors = T)
head(e)
names(e)
pace <- e[,11]
levels(pace) <- c("OkFast", "OkSlow", "Perfect", "TooSlow", "TooFast")
pace <- factor(pace, levels = c("TooSlow", "OkSlow", "Perfect", "OkFast", "TooFast"))
plot(pace, main = "Pace of Class")
class <- as.factor(e[,6])
levels(class)[6:11] <- 0:5
class <- factor(class, levels = c(0:10))
plot(class, main = "How is Class Going?", xlab = "0 = The Worst               10 = The Best")
diff <- as.factor(e[,10])
levels(diff) <- c("OkEasy", "OkHard", "Perfect", "TooEasy", "TooHard")
diff <- factor(diff, levels = c("TooEasy", "OkEasy", "Perfect", "OkHard", "TooHard"))
plot(diff, main = "Class Difficulty")
## ALL DA GRAPHS
par(mfrow = c(2,2))
plot(class, main = "How is Class Going?", xlab = "0 = The Worst               10 = The Best")
hist(e[,4], xlim = c(0,10), xlab = "0 = The Worst               10 = The Best", main = "How Exam Go?")
plot(diff, main = "Class Difficulty")
plot(pace, main = "Class Pace")
plot(jitter(e[,6]) ~ jitter(e[,9]), xlab = "How is Grad School Going?", ylab = "How is the Class Going?")
amod <- lm(e[,6] ~ e[,9])
abline(amod)
summary(amod)
par(mfrow = c(2,2))
plot(amod)
install.packages("car")
lm(income ~ education, data = presto)
lm(income ~ education, data = presto)
plot(presto$prestige)
cor(presto$prestige, presto$education)
cor(presto$prestige, presto$education)
cor(presto$prestige, presto$education) # the correlation
# install.packages("car") # this installs a package - you only need to do this ONCE. Remove the # to run this code.
library(car) # loading the library - make sure you installed it first!
presto <- Prestige # creating a copy of the dataset so you don't mess something up :)
names(presto) # tadaa!!
plot(presto$prestige)
abline(h = mean(presto$prestige), lwd = 5, col = 'red',
xlab = "Index (Individual Row Number)",
ylab = "Individual Prestige Score")
residual <- presto$prestige - mean(presto$prestige)
sum(residual^2)
par(mfrow = c(1,2)) # splits my graphing window
hist(presto$prestige, col = 'black', bor = 'white', main = "")
hist(presto$education, col = 'black', bor = 'white', main = "")
plot(prestige ~ education, data = presto)
mod <- lm(prestige ~ education, data = presto) # this defines the model, and then saves it to an object (called mod)
coef(mod) # this shows me the values of the model
plot(prestige ~ education, data = presto, # plots the model again
xlim = c(0, 16),  # changes my x-axis to range from 0 to 16
ylim = c(-20,90)) # changes my y-axis to range from -15 to 90
abline(mod, col = 'red', lwd = 5) # this adds the line to my graph.
#| echo: false
lm(income ~ education, data = presto)
par(mfrow = c(1,2))
plot(presto$prestige)
abline(h = mean(presto$prestige), lwd = 5, col = 'red')
plot(prestige ~ education, data = presto, # plots the model again
xlim = c(0, 16),  # changes my x-axis to range from 0 to 16
ylim = c(-20,90)) # changes my y-axis to range from -15 to 90
abline(mod, col = 'red', lwd = 5) # this adds the line to my graph.
head(mod$residuals) # these are the residuals (the errors from our model)
head(mod$residuals^2) # these are the squared residuals
sum(mod$residuals^2) # these are the sum of the squared residuals when using the model to make predictions
SSM <- sum(mod$residuals^2) # saving the sum of the squared errors from the model
SST <- sum(residual^2) # saving the sum of the squared errors from the mean
SST - SSM # the difference in the squared errors from the mean vs. the model
(SST - SSM)/SST
plot(prestige ~ education, data = presto,
ylab = "Prestige (Raw Units)",
xlab = "Education (Years)")
mod <- lm(prestige ~ education, data = presto)
abline(mod, lwd = 5, col = 'red')
round(coef(mod), 2)
plot(scale(prestige) ~ scale(education), data = presto,
ylab = "Prestige (Units of Standard Deviation)",
xlab = "Education (Units of Standard Deviation)")
zmod <- lm(scale(prestige) ~ scale(education), data = presto)
abline(zmod, lwd = 5, col = 'red')
round(coef(zmod), 2)
cor(presto$prestige, presto$education) # the correlation
coef(zmod)[2] # the slope of our z-scored model
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv", stringsAsFactors = T)
plot(d$fb.friends)
plot(d$insta.follows)
plot(d$insta.followers)
plot(d$insta.followers)
plot(d$insta.follows)
plot(d$insta.follows, main = "Mean as a Model",
xlab = "Index (Row in Dataset)",
ylab = "# Of Accounts a Person Follows")
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv", stringsAsFactors = T)
plot(d$insta.follows, main = "Mean as a Model (Red Line)",
xlab = "Index (Row in Dataset)",
ylab = "# Of Accounts a Person Follows")
abline(h = mean(d$insta.follows, na.rm = T), lwd = 5)
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv", stringsAsFactors = T)
plot(d$insta.follows, main = "Mean as a Model (Red Line)",
xlab = "Index (Row in Dataset)",
ylab = "# Of Accounts a Person Follows")
abline(h = mean(d$insta.follows, na.rm = T), lwd = 5, col = 'red')
residual <- d$insta.follows - mean(d$insta.follows, na.rm = T)
residual <- d$insta.follows - mean(d$insta.follows, na.rm = T)
SST <- sum(residual^2)
SST
SST <- sum(residual^2, na.rm = T)
SST
sqrt(SST/length(residual))
sd(d$insta.follows, na.rm = T)
sqrt(SST/length(residual)-1)
SST/length(residual)
sqrt(SST/length(residual))
sqrt(SST/(length(residual)-1))
residual
n <- length(na.omit(d$insta.follows))
sqrt(SST/n)
sd(d$insta.follows, na.rm = T)
sqrt(SST/n-1)
sqrt(SST/n) # the equation for the standard deviation
sd(d$insta.follows, na.rm = T) # the function
sqrt(SST/(n-1))
brekY <- m[m$had.breakfast == "Yes",]
brekN <- m[m$had.breakfast == "No",]
dfY <- nrow(brekY)-1
dfN <- nrow(brekN)-1
poolvar <- (var(brekY$hunger) + var(brekN$hunger))/(dfY + dfN)
sqrt(poolvar)/sqrt(nrow(brekY))
varY <- var(brekY$hunger)
varN <- var(brekN$hunger)
nY <- nrow(brekY)
nN <- nrow(brekN)
varpool <- (((nY - 1)*varY) + ((nN-1)*varN))/(nY + nN - 2)
varpool^.5 # pooled sd.
(varpool^.5)/sqrt(nY + nN - 2)
sqrt((varpool/nY) + (varpool/nN))
summary(mod1)
sqrt((varpool/nY) + (varpool/nN))
sqrt((varpool/nY-1) + (varpool/nN-1))
sqrt((varpool/(nY-1)) + (varpool/(nN-1)))
sqrt((varpool/(nY-1)) + (varpool/(nN-1)))
varpool <- (((nY - 1)*varY) + ((nN-1)*varN))/(nY + nN - 2)
varpool^.5 # pooled sd.
(varpool^.5)/sqrt(nY + nN - 2)
sqrt((varpool/nY) + (varpool/nN))
varY <- var(brekY$hunger)
varN <- var(brekN$hunger)
nY <- nrow(brekY)
nN <- nrow(brekN)
varpool <- (((nY - 1)*varY) + ((nN-1)*varN))/(nY + nN - 2)
varpool^.5 # pooled sd.
(varpool^.5)/sqrt(nY + nN - 2)
sqrt((varpool/nY) + (varpool/nN))
summary(mod1)
mod1 <- lm(hunger ~ had.breakfast, data = m)
summary(mod1)
m <- read.csv("~/Dropbox/!GRADSTATS/gradlab/Datasets/MiniGrad/mini_grad_data.csv", stringsAsFactors = T)
head(m) # looks good
nrow(m) # yep.
par(mfrow = c(1,2))
hist(m$hunger)
plot(m$had.breakfast, xlab = "Had Breakfast")
mod <- lm(hunger ~ had.breakfast, data = m)
coef(mod)
brekY <- m[m$had.breakfast == "Yes",]
brekN <- m[m$had.breakfast == "No",]
mean(brekY$hunger) # the slope
mean(brekN$hunger) # the intercept
tapply(m$hunger, m$had.breakfast, mean) # another way to do this.
tapply(m$hunger, m$had.breakfast, mean) # another way to do this.
plot(hunger ~ had.breakfast, data = m)
#install.packages("gplots")
library(gplots)
plotmeans(hunger ~ had.breakfast, data = m)
plotmeans(hunger ~ had.breakfast, data = m, connect = F, ylim = c(0,10))
library(ggplot2)
library(ggthemes)
ggplot(m, aes(x=had.breakfast, y=hunger)) + # defining my space
stat_summary(fun=mean, geom="bar", fill="gray") + # adding a bar for the means
stat_summary(fun.data=mean_se, geom="errorbar", width=0.25) + # adding sampling error [more on this later!]
geom_dotplot(binaxis='y', binwidth=0.1, stackdir="center", alpha=0.5, stroke=0, dotsize=0.8) + # adding dots for the individual data; sorting them
coord_cartesian(ylim=c(0,10)) + # changing the limits of my y-axis.
xlab("Brekky") + ylab("Hunger") + # adding labels
theme_tufte() # adding a theme
ggplot(m, aes(x=had.breakfast, y=hunger)) + # defining my space
stat_summary(fun=mean, geom="bar", fill="gray") + # adding a bar for the means
stat_summary(fun.data=mean_se, geom="errorbar", width=0.25) + # adding sampling error [more on this later!]
geom_dotplot(binaxis='y', binwidth=0.1, stackdir="center", alpha=0.5, stroke=0, dotsize=0.8) + # adding dots for the individual data; sorting them
coord_cartesian(ylim=c(0,10)) + # changing the limits of my y-axis.
xlab("Brekky") + ylab("Hunger") + # adding labels
theme_wsj() # adding a theme
ggplot(m, aes(x=had.breakfast, y=hunger)) + # defining my space
stat_summary(fun=mean, geom="line", fill="gray") + # adding a bar for the means
stat_summary(fun.data=mean_se, geom="errorbar", width=0.25) + # adding sampling error [more on this later!]
geom_dotplot(binaxis='y', binwidth=0.1, stackdir="center", alpha=0.5, stroke=0, dotsize=0.8) + # adding dots for the individual data; sorting them
coord_cartesian(ylim=c(0,10)) + # changing the limits of my y-axis.
xlab("Brekky") + ylab("Hunger") + # adding labels
theme_wsj() # adding a theme
ggplot(m, aes(x=had.breakfast, y=hunger)) + # defining my space
stat_summary(fun=mean, geom="dot", fill="gray") + # adding a bar for the means
stat_summary(fun.data=mean_se, geom="errorbar", width=0.25) + # adding sampling error [more on this later!]
geom_dotplot(binaxis='y', binwidth=0.1, stackdir="center", alpha=0.5, stroke=0, dotsize=0.8) + # adding dots for the individual data; sorting them
coord_cartesian(ylim=c(0,10)) + # changing the limits of my y-axis.
xlab("Brekky") + ylab("Hunger") + # adding labels
theme_wsj() # adding a theme
ggplot(m, aes(x=had.breakfast, y=hunger)) + # defining my space
stat_summary(fun=mean, geom="line") + # adding a bar for the means
stat_summary(fun.data=mean_se, geom="errorbar", width=0.25) + # adding sampling error [more on this later!]
geom_dotplot(binaxis='y', binwidth=0.1, stackdir="center", alpha=0.5, stroke=0, dotsize=0.8) + # adding dots for the individual data; sorting them
coord_cartesian(ylim=c(0,10)) + # changing the limits of my y-axis.
xlab("Brekky") + ylab("Hunger") + # adding labels
theme_wsj() # adding a theme
ggplot(m, aes(x=had.breakfast, y=hunger)) + # defining my space
stat_summary(fun=mean, geom="line", width = 2) + # adding a bar for the means
stat_summary(fun.data=mean_se, geom="errorbar", width=0.25) + # adding sampling error [more on this later!]
geom_dotplot(binaxis='y', binwidth=0.1, stackdir="center", alpha=0.5, stroke=0, dotsize=0.8) + # adding dots for the individual data; sorting them
coord_cartesian(ylim=c(0,10)) + # changing the limits of my y-axis.
xlab("Brekky") + ylab("Hunger") + # adding labels
theme_wsj() # adding a theme
ggplot(m, aes(x=had.breakfast, y=hunger)) + # defining my space
stat_summary(fun=mean, geom="lines", width = 2) + # adding a bar for the means
stat_summary(fun.data=mean_se, geom="errorbar", width=0.25) + # adding sampling error [more on this later!]
geom_dotplot(binaxis='y', binwidth=0.1, stackdir="center", alpha=0.5, stroke=0, dotsize=0.8) + # adding dots for the individual data; sorting them
coord_cartesian(ylim=c(0,10)) + # changing the limits of my y-axis.
xlab("Brekky") + ylab("Hunger") + # adding labels
theme_wsj() # adding a theme
ggplot(m, aes(x=had.breakfast, y=hunger)) + # defining my space
stat_summary(fun=mean, geom="bar", fill="gray") + # adding a bar for the means
stat_summary(fun.data=mean_se, geom="errorbar", width=0.25) + # adding sampling error [more on this later!]
geom_dotplot(binaxis='y', binwidth=0.1, stackdir="center", alpha=0.5, stroke=0, dotsize=0.8) + # adding dots for the individual data; sorting them
coord_cartesian(ylim=c(0,10)) + # changing the limits of my y-axis.
xlab("Brekky") + ylab("Hunger") + # adding labels
theme_wsj() # adding a theme
par(mfrow = c(2,2))
plot(mod)
summary(mod)$r.squared
plot(m$hunger)
abline(mean(m$hunger), lwd = 5)
plot(m$hunger)
abline(mean(m$hunger, na.rm = T), lwd = 5)
plot(m$hunger)
abline(h = mean(m$hunger, na.rm = T), lwd = 5)
residuals <- m$hunger - mean(m$hunger, na.rm = T)
SST <- sum(residuals^2)
SST
plot(m$hunger)
abline(h = mean(m$hunger, na.rm = T), lwd = 5)
plot(m$hunger, col = m$had.breakfast)
plot(m$hunger, col = m$had.breakfast, pch = 19)
coef(mod)
abline(h = coef(mod)[1], lwd = 5, col = 'black') # line for non breakfast folks
plot(m$hunger, col = m$had.breakfast, pch = 19)
abline(h = coef(mod)[1], lwd = 5, col = 'black') # line for non breakfast folks
abline(h = coef(mod)[1] + coef(mod)[2], lwd = 5, col = 'red') # line for non breakfast folks
par(mfrow = c(1,2))
plot(m$hunger)
abline(h = mean(m$hunger, na.rm = T), lwd = 5)
residuals <- m$hunger - mean(m$hunger, na.rm = T)
SST <- sum(residuals^2)
SST
## THE MODEL
plot(m$hunger, col = m$had.breakfast, pch = 19)
abline(h = coef(mod)[1], lwd = 5, col = 'black') # line for non breakfast folks
abline(h = coef(mod)[1] + coef(mod)[2], lwd = 5, col = 'red') # line for non breakfast folks
SSM <- sum(mod$residuals^2)
SSM
SST
SSM
(SST - SSM)/SST
nY <- nrow(brekY)
nN <- nrow(brekN)
dfY <- nY-1 # the sample size of breakfast eaters, minus 1
dfN <- nN-1
varY <- var(brekY$hunger)
varN <- var(brekN$hunger)
poolvar <- ((dfY * varY) + (dfN * varN))/(dfY + dfN)
poolsd <- poolvar^.5
diff <- coef(mod)[2] # the difference between groups
diff/poolsd
poolsd
diff
poolsd
sqrt((poolvar/nY) + (poolvar/nN))
summary(mod)
summary(mod)
t.test(brekY$hunger, brekN$hunger, var.equal = T)
d <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/cal_mini_SP25.csv", stringsAsFactors = T)
plot(d$insta.follows, main = "Mean as a Model (Red Line)",
xlab = "Index (Row in Dataset)",
ylab = "# Of Accounts a Person Follows")
abline(h = mean(d$insta.follows, na.rm = T), lwd = 5, col = 'red')
names(d)
head(d)
hist(d$insta.follows)
max(d$insta.followers, na.rm = T)
max(d$insta.follows, na.rm = T)
max(scale(d$insta.follows, na.rm = T))
scale(d$insta.follows, na.rm = T)
max(scale(d$insta.follows), na.rm = T)
hist(d$insta.follows)
hist(d$socialmed.use)
par(mfrow = c(1,2))
hist(d$insta.follows)
max(scale(d$insta.follows), na.rm = T) # looking to see the max value and its z-score to determine whether its an outlier or not
hist(d$socialmed.use)
plot(insta.follows ~ socialmed.use, data = d)
plot(insta.follows ~ socialmed.use, data = d)
mod <- lm(insta.follows ~ socialmed.use, data = d)
abline(mod, lwd = 5, col = 'red')
mod
mod <- lm(insta.follows ~ socialmed.use, data = d) # defines the model; saves as mod
mod # shows me what is inside mod
plot(insta.follows ~ socialmed.use, data = d) # graphs the relationship
abline(mod, lwd = 5, col = 'red') # draws a red line of width five based on mod
mod
plot(insta.follows ~ socialmed.use, data = d) # graphs the relationship
abline(mod, lwd = 5, col = 'red') # draws a red line of width five based on mod
coef(mod)
coef(mod)
284 + 43.9 * 5
par(mfrow = c(1,2))
plot(d$insta.follows, main = "Mean as a Model (Red Line)",
xlab = "Index (Row in Dataset)",
ylab = "# Of Accounts a Person Follows")
abline(h = mean(d$insta.follows, na.rm = T), lwd = 5, col = 'red')
plot(insta.follows ~ socialmed.use, data = d) # graphs the relationship
abline(mod, lwd = 5, col = 'red') # draws a red line of width five based on mod
hist(d$bored)
plot(insta.follows ~ bored, data = d)
plot(insta.follows ~ bored, data = d)
mod2 <- lm(insta.follows ~ bored, data = d)
abline(mod2)
mod3 <- lm(insta.follows ~ height, data = d)
plot(insta.follows ~ height, data = d)
abline(mod3, lwd = 5)
mod3 <- lm(insta.follows ~ height, data = d)
plot(insta.follows ~ height, data = d)
abline(mod3, lwd = 5)
plot(insta.follows ~ height, data = d)
abline(mod, lwd = 5)
mod3 <- lm(insta.follows ~ height, data = d)
plot(insta.follows ~ height, data = d)
abline(mod3, lwd = 5)
d$H2 <- d$height
d$H2[d$H2 < 40 & d$H2 > 100]
d$H2[d$H2 < 40 & d$H2 > 100]
d$H2[d$H2 < 40 | d$H2 > 100]
d$H2[d$H2 < 40 | d$H2 > 100] <- NA
hist(d$H2)
mod4 <- lm(insta.follows ~ H2, data = d)
plot(insta.follows ~ H2, data = d)
abline(mod4, lwd = 5)
range(d$insta.followers)
# INSTA.FOLLOWERS
range(d$insta.followers, na.rm = T)
hist(d$insta.followers)
d$insta.followers[d$insta.followers > 10000]
d$insta.followers[d$insta.followers > 10000] <- NA
mod5 <- lm(insta.follows ~ insta.followers, data = d)
plot(insta.follows ~ insta.followers, data = d)
abline(mod5, lwd = 5)
hist(d$bored)
plot(insta.follows ~ bored, data = d)
mod2 <- lm(insta.follows ~ bored, data = d)
abline(mod2)
d$insta.followers[d$insta.followers > 10000] <- NA # removing the outlier!
mod5 <- lm(insta.follows ~ insta.followers, data = d)
plot(insta.follows ~ insta.followers, data = d)
abline(mod5, lwd = 5)
SST # sum of squared errors when using the mean
residual <- d$insta.follows - mean(d$insta.follows, na.rm = T)
SST <- sum(residual^2, na.rm = T)
SST
SST # sum of squared errors when using the mean
mod$residuals # the residuals from my model
mod$residuals # the residuals from my model
sum(mod$residuals)
sum(mod$residuals^2)
SST - SSM
SSM <- sum(mod$residuals^2)
SST - SSM
SSM
SST
SST - SSM
SST
(SST - SSM)/SST
plot(insta.follows ~ insta.followers, data = d) # graphs the relationship
abline(mod5, lwd = 5, col = 'red') # draws a red line of width five based on mod
par(mfrow = c(1,2))
plot(d$insta.follows, main = "Mean as a Model (Red Line)",
xlab = "Index (Row in Dataset)",
ylab = "# Of Accounts a Person Follows")
abline(h = mean(d$insta.follows, na.rm = T), lwd = 5, col = 'red')
plot(insta.follows ~ insta.followers, data = d) # graphs the relationship
abline(mod5, lwd = 5, col = 'red') # draws a red line of width five based on mod
SSM5 <- sum(mod5$residuals^2)
SST - SSM5
SSM5
par(mfrow = c(1,2))
plot(d$insta.follows, main = "Mean as a Model (Red Line)",
xlab = "Index (Row in Dataset)",
ylab = "# Of Accounts a Person Follows")
abline(h = mean(d$insta.follows, na.rm = T), lwd = 5, col = 'red')
plot(insta.follows ~ insta.followers, data = d) # graphs the relationship
abline(mod5, lwd = 5, col = 'red') # draws a red line of width five based on mod
SSM5 <- sum(mod5$residuals^2)
SSM5
SST - SSM5
(SST - SSM5)/SST
par(mfrow = c(1,2))
plot(d$insta.follows, main = "Mean as a Model (Red Line)",
xlab = "Index (Row in Dataset)",
ylab = "# Of Accounts a Person Follows")
abline(h = mean(d$insta.follows, na.rm = T), lwd = 5, col = 'red')
plot(insta.follows ~ insta.followers, data = d) # graphs the relationship
abline(mod5, lwd = 5, col = 'red') # draws a red line of width five based on mod
plot(insta.follows ~ insta.followers, data = d) # graphs the relationship
abline(mod5, lwd = 5, col = 'red') # draws a red line of width five based on mod
names(d)
names(h)
h <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/hormone_data.csv", stringsAsFactors = T)
names(h)
h <- read.csv("~/Dropbox/!WHY STATS/Class Datasets/hormone_data.csv", stringsAsFactors = T)
mod1 <- lm(NPI ~ test, data = h)
plot(mod1 <- lm(NPI ~ test, data = h))
abline(mod1, lwd = 5)
summary(mod1)
mod1 <- lm(NPI ~ test, data = h)
plot(NPI ~ test, data = h)
abline(mod1, lwd = 5)
summary(mod1)
library(gplots)
mod2 <- lm(NPI ~ sex, data = h)
plotmeans(mod2 <- lm(NPI ~ sex, data = h, connect = F))
mod2 <- lm(NPI ~ sex, data = h)
plotmeans(NPI ~ sex, data = h, connect = F)
summary(mod2)
mod3 <- lm(test ~ sex, data = h)
plotmeans(test ~ sex, data = h, connect = F)
summary(mod3)
s
summary(mod4)
mod4 <- lm(NPI ~ test + sex, data = h)
summary(mod4)
mod4 <- lm(NPI ~ test, data = h)
summary(mod4)
library(car)
library(car)
library(gplots)
mod <- lm(prestige ~ type, data = Prestige)
summary(mod)
plotmeans(prestige ~ type, data = Prestige, connect = F, ylab = "Prestige", xlab = "Job Type")
mod2 <- lm(prestige ~ education, data = Prestige)
plot(prestige ~ education, data = Prestige, xlab = "Years of Education", ylab = "Prestige")
abline(mod2, lwd = 5, col = 'red')
summary(mod2)
mod3 <- lm(education ~ type, data = Prestige)
coef(mod3)
mod3 <- lm(education ~ type, data = Prestige)
summary(mod3)
plotmeans(education ~ type, data = Prestige, connect = F, xlab = "Job Type", ylab = "Years of Education")
mod4 <- lm(prestige ~ education + type, data = presto)
mod4 <- lm(prestige ~ education + type, data = Prestige)
coef(mod4)
export_summs(mod1, mod2, mod3, transform.response = T, scale = T, confint = T)
# install.packages(jtools)
library(jtools)
export_summs(mod1, mod2, mod3, transform.response = T, scale = T, confint = T)
export_summs(mod1, mod2, mod3, transform.response = T, scale = T, confint = T)
export_summs(mod1, mod2, mod3, transform.response = T, scale = T)
export_summs(mod1, mod2, mod4, transform.response = T, scale = T)
export_summs(mod1, mod2, mod4, transform.response = T, scale = T)
mod1 <- lm(prestige ~ type, data = Prestige)
plotmeans(prestige ~ type, data = Prestige, connect = F, ylab = "Prestige", xlab = "Job Type")
summary(mod1)
export_summs(mod1, mod2, mod4, transform.response = T, scale = T)
export_summs(mod1, mod2, mod4, transform.response = T, center = T)
export_summs(mod1, mod2, mod4, transform.response = T, scale = T, binary.factors = T)
export_summs(mod1, mod2, mod4, transform.response = T, scale = T, center = T, binary.factors = T)
